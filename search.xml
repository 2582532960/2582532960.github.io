<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/10/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>图片测试</title>
    <url>/2023/10/31/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>第一张<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/11.jpg"
                      alt="Test"
                ><br>第二张图片<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/22.jpg"
                      alt="Test"
                ></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>感慨</title>
    <url>/2023/10/31/%E6%84%9F%E6%85%A8/</url>
    <content><![CDATA[<p>上周把上合运营端差不多做完了，基本上没什么事可做了，老师让我看看学学TypeScript，但是Bilibili上也搜不到TypeScript+React的实战项目，单看TypeScript也太枯燥了，昨天实在没什么事做，做了点四级做的我头昏脑涨昏昏欲睡，胡乱从百度上乱搜，想着要不就也做做博客打发打发时间，跟着教程走一遍，起初十分顺畅，可以说毫无技术可言，本来打算部署到gitee上，结果gitee还没做实名认证，两周内审核，只能转而试试部署到github上，可是！它！全！是！英！文！</p>
<p>今天早晨到现在，一边看文档，一边百度，部署之后样式没了、样式出来了背景图片没了、最后弄弄评论死活弄不出来，说句低级的，我现在搞不明白我的仓库名叫什么，我的用户名叫什么，一通乱点，最后算了，想想在这上面下这功夫干嘛啊，都是别人写好的模板，又学不到什么实际的东西，随便做做能记录东西就得了。</p>
<p>那这博客就做到这样就行了，暂时也不改它样式啊，功能的了。</p>
<p>现在又没有事情做了，四级看不进心里去，技术觉得没有什么可学的了，只想做实战又没有可做的，看着旁边人都在吧嗒吧嗒敲代码，就觉得自己太浑浑噩噩了，我到底该干嘛！！！</p>
]]></content>
      <categories>
        <category>自述</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>脚手架配置代理总结</title>
    <url>/2023/11/02/%E8%84%9A%E6%89%8B%E6%9E%B6%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>在 <strong>package.json</strong> 中追加如下配置</p>
<p>“proxy”:”<a class="link"   href="http://localhost:5000/" >http://localhost:5000 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“</p>
<p>说明：</p>
<ol>
<li>优点：配置简单，前端请求资源时可以不加任何前缀。</li>
<li>缺点：不能配置多个代理。</li>
<li>工作方式：上述方式配置代理，当请求了 3000 不存在的资源时，那么该请求会转发 5000（优先匹配前端资源）</li>
</ol>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ol>
<li>第一步：创建代理配置文件</li>
</ol>
<p>在 src 下创建配置文件：<strong>src&#x2F;setupProxy.js</strong></p>
<ol start="2">
<li>编写 setupProxy.js 配置具体代理规则：</li>
</ol>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&quot;http-proxy-middleware&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">app</span>) &#123;</span><br><span class="line">  app.<span class="title function_">use</span>(</span><br><span class="line">    <span class="string">&quot;/api1&quot;</span>, <span class="comment">//api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)</span></span><br><span class="line">    <span class="title function_">createProxyMiddleware</span>(&#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&quot;https://shanghe.qlu.edu.cn&quot;</span>, <span class="comment">//配置转发目标地址(能返回数据的服务器地址)</span></span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">//控制服务器接收到的请求头中host字段的值</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">        changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000</span></span><br><span class="line"><span class="comment">        changeOrigin默认值为false，但我们一般将changeOrigin值设为true</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">        <span class="string">&quot;^/api1&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      &#125;, <span class="comment">//去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="string">&quot;/api2&quot;</span>,</span><br><span class="line">    <span class="title function_">createProxyMiddleware</span>(&#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&quot;http://localhost:5001&quot;</span>,</span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">        <span class="string">&quot;^/api2&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>说明：</p>
<ol>
<li>优点：可以配置多个代理，可以灵活的控制请求是否走代理。</li>
<li>缺点：配置繁琐，前端请求资源时必须加前缀。</li>
</ol>
<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>如果你的前端应用和后端 API 服务器没有运行在同一个主机上，你需要在开发环境下将 API 请求代理到 API 服务器。这个问题可以通过 <strong>vue.config.js</strong> 中的 devServer.proxy 选项来配置。</p>
<p>devServer.proxy 可以是一个指向开发环境 API 服务器的字符串：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&quot;http://localhost:5000&quot;</span>, <span class="comment">//配置转发目标地址(能返回数据的服务器地址)</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h2><p>如果你想要更多的代理控制行为，也可以使用一个 path: options 成对的对象。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:5000&quot;</span>, <span class="comment">//配置转发目标地址(能返回数据的服务器地址)</span></span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>, <span class="comment">//用于支持websocket</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">//控制服务器接收到的请求头中host字段的值</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">          changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000</span></span><br><span class="line"><span class="comment">          changeOrigin默认值为false，但我们一般将changeOrigin值设为true</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;, <span class="comment">//去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;/demo&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:5001&quot;</span>,</span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/demo&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h1 id="Vite-中配置代理"><a href="#Vite-中配置代理" class="headerlink" title="Vite 中配置代理"></a>Vite 中配置代理</h1><p>在<strong>vite.config.ts</strong>或<strong>vue.config.js</strong>中添加 server.proxy 选项，用于配置代理服务器的规则。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  defineConfig</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> react <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-react-swc&#x27;</span>或者<span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">react</span>()],或者<span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;https://shanghe.qlu.edu.cn/ecos&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path: string</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;/test&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:5000&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path: string</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/test/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>react将express配置到react项目路径下启动，并配置为自动更新（热加载），并配置同时启动react项目以及express服务</title>
    <url>/2023/11/06/react%E5%B0%86express%E9%85%8D%E7%BD%AE%E5%88%B0react%E9%A1%B9%E7%9B%AE%E8%B7%AF%E5%BE%84%E4%B8%8B%E5%90%AF%E5%8A%A8%EF%BC%8C%E5%B9%B6%E9%85%8D%E7%BD%AE%E4%B8%BA%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%EF%BC%88%E7%83%AD%E5%8A%A0%E8%BD%BD%EF%BC%89%EF%BC%8C%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%90%8C%E6%97%B6%E5%90%AF%E5%8A%A8react%E9%A1%B9%E7%9B%AE%E4%BB%A5%E5%8F%8Aexpress%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<p>本文基于 (“react”: “^16.13.1”) 版本</p>
<p><strong>1.参考 express 下的 package.json 文件</strong></p>
<p>express 的服务启动命令为：npm start</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/express1.png"
                     
                ></p>
<p><strong>2.打开 react 项目的 package.json 文件，进行改写，增加 server 命令</strong></p>
<p>路径为 <strong>express 项目名 &#x2F;bin&#x2F;www</strong> ，须根据自己项目 express 服务文件夹名称进行改写</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node server/bin/www&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/express2.png"
                     
                ></p>
<p><strong>3.在 react 项目路径的基础上，启动 express 服务</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure></div>

<p>出现如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/express3.png"
                     
                ></p>
<p><strong>4.express 实现自动刷新 (热加载)</strong></p>
<p>express 默认是没有热加载的，每次更改接口都需要重新启动，不然不生效</p>
<p>使用 nodemon 实现 express 热加载。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">npm  install nodemon --save</span><br></pre></td></tr></table></figure></div>

<p><strong>5.改写 package.json （注意是 react 项目的 package.json）</strong></p>
<p>node 更改成 nodemon</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon server/bin/www&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/express4.png"
                     
                ></p>
<p><strong>6.启动 npm run server</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure></div>

<p>至此配置热加载完成，以下为一条命令同时启动 react 项目以及 express 服务</p>
<p><strong>7.使用 concurrently (一条命令同时启动 react 项目以及 express 服务)</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install concurrently --save</span><br></pre></td></tr></table></figure></div>

<p>还是修改 react 项目的 package.json,增加 <strong>dev</strong> 命令</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;concurrently \&quot;npm start\&quot; \&quot;npm run server\&quot;&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/express5.png"
                     
                ></p>
<p><strong>8. 使用 dev 命令同时启动 react 项目以及 express 服务端</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></div>

<p>启动成功</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/express6.png"
                     
                ></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_43233914/article/details/105143620" >点击查看原文 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
        <tag>express</tag>
      </tags>
  </entry>
</search>
