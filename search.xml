<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/10/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>图片测试</title>
    <url>/2023/10/31/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>第一张<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/11.jpg"
                      alt="Test"
                ><br>第二张图片<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/22.jpg"
                      alt="Test"
                ></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>感慨</title>
    <url>/2023/10/31/%E6%84%9F%E6%85%A8/</url>
    <content><![CDATA[<p>上周把上合运营端差不多做完了，基本上没什么事可做了，老师让我看看学学TypeScript，但是Bilibili上也搜不到TypeScript+React的实战项目，单看TypeScript也太枯燥了，昨天实在没什么事做，做了点四级做的我头昏脑涨昏昏欲睡，胡乱从百度上乱搜，想着要不就也做做博客打发打发时间，跟着教程走一遍，起初十分顺畅，可以说毫无技术可言，本来打算部署到gitee上，结果gitee还没做实名认证，两周内审核，只能转而试试部署到github上，可是！它！全！是！英！文！</p>
<p>今天早晨到现在，一边看文档，一边百度，部署之后样式没了、样式出来了背景图片没了、最后弄弄评论死活弄不出来，说句低级的，我现在搞不明白我的仓库名叫什么，我的用户名叫什么，一通乱点，最后算了，想想在这上面下这功夫干嘛啊，都是别人写好的模板，又学不到什么实际的东西，随便做做能记录东西就得了。</p>
<p>那这博客就做到这样就行了，暂时也不改它样式啊，功能的了。</p>
<p>现在又没有事情做了，四级看不进心里去，技术觉得没有什么可学的了，只想做实战又没有可做的，看着旁边人都在吧嗒吧嗒敲代码，就觉得自己太浑浑噩噩了，我到底该干嘛！！！</p>
]]></content>
      <categories>
        <category>自述</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>脚手架配置代理总结</title>
    <url>/2023/11/02/%E8%84%9A%E6%89%8B%E6%9E%B6%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>在 <strong>package.json</strong> 中追加如下配置</p>
<p>“proxy”:”<a class="link"   href="http://localhost:5000/" >http://localhost:5000 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“</p>
<p>说明：</p>
<ol>
<li>优点：配置简单，前端请求资源时可以不加任何前缀。</li>
<li>缺点：不能配置多个代理。</li>
<li>工作方式：上述方式配置代理，当请求了 3000 不存在的资源时，那么该请求会转发 5000（优先匹配前端资源）</li>
</ol>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ol>
<li>第一步：创建代理配置文件</li>
</ol>
<p>在 src 下创建配置文件：<strong>src&#x2F;setupProxy.js</strong></p>
<ol start="2">
<li>编写 setupProxy.js 配置具体代理规则：</li>
</ol>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&quot;http-proxy-middleware&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">app</span>) &#123;</span><br><span class="line">  app.<span class="title function_">use</span>(</span><br><span class="line">    <span class="string">&quot;/api1&quot;</span>, <span class="comment">//api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)</span></span><br><span class="line">    <span class="title function_">createProxyMiddleware</span>(&#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&quot;https://shanghe.qlu.edu.cn&quot;</span>, <span class="comment">//配置转发目标地址(能返回数据的服务器地址)</span></span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">//控制服务器接收到的请求头中host字段的值</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">        changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000</span></span><br><span class="line"><span class="comment">        changeOrigin默认值为false，但我们一般将changeOrigin值设为true</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">        <span class="string">&quot;^/api1&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      &#125;, <span class="comment">//去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="string">&quot;/api2&quot;</span>,</span><br><span class="line">    <span class="title function_">createProxyMiddleware</span>(&#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&quot;http://localhost:5001&quot;</span>,</span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">        <span class="string">&quot;^/api2&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>说明：</p>
<ol>
<li>优点：可以配置多个代理，可以灵活的控制请求是否走代理。</li>
<li>缺点：配置繁琐，前端请求资源时必须加前缀。</li>
</ol>
<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>如果你的前端应用和后端 API 服务器没有运行在同一个主机上，你需要在开发环境下将 API 请求代理到 API 服务器。这个问题可以通过 <strong>vue.config.js</strong> 中的 devServer.proxy 选项来配置。</p>
<p>devServer.proxy 可以是一个指向开发环境 API 服务器的字符串：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&quot;http://localhost:5000&quot;</span>, <span class="comment">//配置转发目标地址(能返回数据的服务器地址)</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h2><p>如果你想要更多的代理控制行为，也可以使用一个 path: options 成对的对象。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:5000&quot;</span>, <span class="comment">//配置转发目标地址(能返回数据的服务器地址)</span></span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>, <span class="comment">//用于支持websocket</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">//控制服务器接收到的请求头中host字段的值</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">          changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000</span></span><br><span class="line"><span class="comment">          changeOrigin默认值为false，但我们一般将changeOrigin值设为true</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;, <span class="comment">//去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;/demo&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:5001&quot;</span>,</span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/demo&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h1 id="Vite-中配置代理"><a href="#Vite-中配置代理" class="headerlink" title="Vite 中配置代理"></a>Vite 中配置代理</h1><p>在<strong>vite.config.ts</strong>或<strong>vue.config.js</strong>中添加 server.proxy 选项，用于配置代理服务器的规则。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  defineConfig</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> react <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-react-swc&#x27;</span>或者<span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">react</span>()],或者<span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;https://shanghe.qlu.edu.cn/ecos&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path: string</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;/test&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:5000&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path: string</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/test/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>express配置热加载</title>
    <url>/2023/11/06/express%E9%85%8D%E7%BD%AE%E7%83%AD%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<p>本文基于 (“react”: “^16.13.1”) 版本</p>
<p><strong>1.参考 express 下的 package.json 文件</strong></p>
<p>express 的服务启动命令为：npm start</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/express1.png"
                     
                ></p>
<p><strong>2.打开 react 项目的 package.json 文件，进行改写，增加 server 命令</strong></p>
<p>路径为 <strong>express 项目名 &#x2F;bin&#x2F;www</strong> ，须根据自己项目 express 服务文件夹名称进行改写</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node server/bin/www&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/express2.png"
                     
                ></p>
<p><strong>3.在 react 项目路径的基础上，启动 express 服务</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure></div>

<p>出现如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/express3.png"
                     
                ></p>
<p><strong>4.express 实现自动刷新 (热加载)</strong></p>
<p>express 默认是没有热加载的，每次更改接口都需要重新启动，不然不生效</p>
<p>使用 nodemon 实现 express 热加载。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">npm  install nodemon --save</span><br></pre></td></tr></table></figure></div>

<p><strong>5.改写 package.json （注意是 react 项目的 package.json）</strong></p>
<p>node 更改成 nodemon</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon server/bin/www&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/express4.png"
                     
                ></p>
<p><strong>6.启动 npm run server</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure></div>

<p>至此配置热加载完成，以下为一条命令同时启动 react 项目以及 express 服务</p>
<p><strong>7.使用 concurrently (一条命令同时启动 react 项目以及 express 服务)</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install concurrently --save</span><br></pre></td></tr></table></figure></div>

<p>还是修改 react 项目的 package.json,增加 <strong>dev</strong> 命令</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;concurrently \&quot;npm start\&quot; \&quot;npm run server\&quot;&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/express5.png"
                     
                ></p>
<p><strong>8. 使用 dev 命令同时启动 react 项目以及 express 服务端</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></div>

<p>启动成功</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/express6.png"
                     
                ></p>
<hr>
<p><a class="link"   href="https://blog.csdn.net/weixin_43233914/article/details/105143620" >点击查看原文 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Vite 快速构建前端 React 项目</title>
    <url>/2023/11/06/%E4%BD%BF%E7%94%A8Vite%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E5%89%8D%E7%AB%AFReact%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="一、初始化项目"><a href="#一、初始化项目" class="headerlink" title="一、初始化项目"></a>一、初始化项目</h2><p>首先，在终端命令行中输入如下的命令：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">npm create vite</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">✔ Project name<span class="punctuation">:</span> vite-project</span><br><span class="line">? Select a framework<span class="punctuation">:</span> › - Use arrow-keys. Return to submit.</span><br><span class="line">    vanilla <span class="comment">// 无前端框架</span></span><br><span class="line">    vue     <span class="comment">// 基于 Vue</span></span><br><span class="line"> &gt;  react   <span class="comment">// 基于 React</span></span><br><span class="line">    preact  <span class="comment">// 基于 Preact（一款精简版的类 React 框架）</span></span><br><span class="line">    lit     <span class="comment">// 基于 lit（一款 Web Components 框架）</span></span><br><span class="line">    svelte  <span class="comment">// 基于 Svelte</span></span><br></pre></td></tr></table></figure></div>

<p>此处，我们选择构建的框架为 React。接着，执行如下命令在启动本地项目：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">cd vite-project</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></div>

<p>安装完成之后，去浏览器中打开 localhost:&#x2F;&#x2F;5173&#x2F;页面就可以看到示例项目了。</p>
<h2 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h2><p>路径别名的配置（vite.config.ts）</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> react <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-react&quot;</span>;</span><br><span class="line"><span class="comment">// 引入 path 包注意两点:</span></span><br><span class="line"><span class="comment">// 1. 为避免类型报错，你需要通过 `pnpm i @types/node -D` 安装类型</span></span><br><span class="line"><span class="comment">// 2. tsconfig.node.json 中设置 `allowSyntheticDefaultImports: true`，以允许下面的 default 导入方式</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">react</span>()],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./src&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p>配置路径别名的提示（tsconfig.json）</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@/*&quot;</span>: [<span class="string">&quot;./src/*&quot;</span>],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="三、集成-react-router"><a href="#三、集成-react-router" class="headerlink" title="三、集成 react-router"></a>三、集成 react-router</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i --save-dev react-router-dom <span class="comment">//这里可以使用cnpm代替npm命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//说明： -save-dev 的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//总结--save-dev和-save的区别如下:</span></span><br><span class="line"><span class="comment">//devDependencies 节点下的模块是我们在开发时需要用的，比如项目中使用的 gulp ，压缩css、js的模块。这些模块在我们的项目部署后是不需要的，所以我们可以使用 -save-dev 的形式安装。像 express 这些模块是项目运行必备的，应该安装在 dependencies 节点下，所以我们应该使用 -save 的形式安装。</span></span><br></pre></td></tr></table></figure></div>

<p><a class="link"   href="https://reactrouter.com/en/main/start/overview" >路由官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="http://www.reactrouter.cn/docs/api#routes-%E5%92%8C-route" >中文文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="四、集成-Antd"><a href="#四、集成-Antd" class="headerlink" title="四、集成 Antd"></a>四、集成 Antd</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install antd --save</span><br></pre></td></tr></table></figure></div>

<p>图标</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install @ant-design/icons --save</span><br></pre></td></tr></table></figure></div>

<h2 id="五、样式"><a href="#五、样式" class="headerlink" title="五、样式"></a>五、样式</h2><p>reset.css 是一种 CSS 文件，它的作用是重置网页的默认样式。由于不同浏览器对于 HTML 默认样式的设定不同，导致网页在不同浏览器上的显示效果各异。为了避免这种情况，可以使用 reset.css 对网页默认样式进行重置，使不同浏览器上的显示效果尽量一致。</p>
<p>现在需要对全部的样式进行清除，使用命令导入依赖：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i reset-css</span><br></pre></td></tr></table></figure></div>

<p>然后在 main.tsx 中进行引入，引入的位置必须要在<code>import App from &quot;./App.tsx&quot;;</code>上面</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;reset-css&quot;</span>;</span><br></pre></td></tr></table></figure></div>

<p>安装 sass</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i --save-dev sass</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>Reat父子组件的通信</title>
    <url>/2023/11/06/Reat%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="一、父组件向子组件传值（props）"><a href="#一、父组件向子组件传值（props）" class="headerlink" title="一、父组件向子组件传值（props）"></a>一、父组件向子组件传值（props）</h2><p>父组件：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&quot;@/Test/Son&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      我是父组件</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">name</span>=<span class="string">&quot;小明&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>子组件:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">props: any</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      我是子组件 我是&#123;props.name&#125;,我的年龄是&#123;props.age&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>浏览器运行效果：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/communication1.png"
                     
                ></p>
<h2 id="二、子组件向父组件传值：通过自定义方法的方式"><a href="#二、子组件向父组件传值：通过自定义方法的方式" class="headerlink" title="二、子组件向父组件传值：通过自定义方法的方式"></a>二、子组件向父组件传值：通过自定义方法的方式</h2><p>父组件：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&quot;@/Test/Son&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">fatherFun</span> = (<span class="params">value: any</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">alert</span>(value);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      我是父组件</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">name</span>=<span class="string">&quot;小明&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">sonValue</span>=<span class="string">&#123;fatherFun&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>子组件：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">props: any</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toFather</span> = (<span class="params">value: any</span>) =&gt; &#123;</span><br><span class="line">    props.<span class="title function_">sonValue</span>(value);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      我是子组件 我是&#123;props.name&#125;,我的年龄是&#123;props.age&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          toFather(&quot;我是子组件传过来的数据&quot;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        点我向父组件传数据</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>浏览器运行效果：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/communication2.png"
                     
                ></p>
<h2 id="三、state：状态管理：可以更新页面里面的数据的状态，使页面重新渲染。"><a href="#三、state：状态管理：可以更新页面里面的数据的状态，使页面重新渲染。" class="headerlink" title="三、state：状态管理：可以更新页面里面的数据的状态，使页面重新渲染。"></a>三、state：状态管理：可以更新页面里面的数据的状态，使页面重新渲染。</h2><p><strong>演示一</strong></p>
<p>父组件：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&quot;@/Test/Son&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [weather, setWeather] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      我是父组件</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      今天的天气很&#123;weather ? &quot;晴朗&quot; : &quot;阴暗&quot;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">weather</span>=<span class="string">&#123;weather&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">changeWeather</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setWeather(!weather);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>子组件：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Son2</span>(<span class="params">props: any</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleChangeWeather</span> = (<span class="params">value: any</span>) =&gt; &#123;</span><br><span class="line">    props.<span class="title function_">changeWeather</span>(value);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          handleChangeWeather(&quot;&quot;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        改变天气</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>演示二</strong></p>
<p>父组件：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&quot;@/Test/Son&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      我是父组件</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      我点击的是&#123;name&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">showName</span>=<span class="string">&#123;(value:</span> <span class="attr">any</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setName(value);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>子组件：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Son2</span>(<span class="params">props: any</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;小兰&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;小红&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleShow</span> = (<span class="params">value: any</span>) =&gt; &#123;</span><br><span class="line">    props.<span class="title function_">showName</span>(value);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;data.map((item: any) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">              handleShow(item.name);</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          &gt;</span></span><br><span class="line"><span class="language-xml">            &#123;item.name&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        );</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>浏览器运行效果：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/communication3.png"
                     
                ></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx学习</title>
    <url>/2023/11/12/Nginx%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="1-Nginx-简介"><a href="#1-Nginx-简介" class="headerlink" title="1.Nginx 简介"></a>1.Nginx 简介</h1><h2 id="1-1-什么是-Nginx"><a href="#1-1-什么是-Nginx" class="headerlink" title="1.1 什么是 Nginx"></a>1.1 什么是 Nginx</h2><p>Nginx (engine x) 是一个高性能的 HTTP 和反向代理 web 服务器，同时也提供了 IMAP&#x2F;POP3&#x2F;SMTP 服务。</p>
<p>其将源代码以类 BSD 许可证的形式发布，因它的稳定性、丰富的功能集、简单的配置文件和低系统资源的消耗而闻名。</p>
<p>Nginx 是一款轻量级的 Web 服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器，在 BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上 nginx 的并发能力在同类型的网页服务器中表现较好。</p>
<p>Nginx 专为性能优化而开发，性能是其最重要的考量，实现上非常注重效率，能经受高负载的考验，有报告表明能支持高达 50000 个并发连接数。</p>
<h2 id="1-2-正向代理"><a href="#1-2-正向代理" class="headerlink" title="1.2 正向代理"></a>1.2 正向代理</h2><p>Nginx 不仅可以做反向代理，实现负载均衡。还能用作正向代理来进行上网等功能。</p>
<p>正向代理:如果把局域网外的 Internet 想象成一个巨大的资源库，则局域网中的客户端要访问 Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理。·</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86.png"
                     
                ></p>
<h2 id="1-3-反向代理"><a href="#1-3-反向代理" class="headerlink" title="1.3 反向代理"></a>1.3 反向代理</h2><p>反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后,在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器 IP 地址。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png"
                     
                ></p>
<h2 id="1-4-正向代理和反向代理的异同"><a href="#1-4-正向代理和反向代理的异同" class="headerlink" title="1.4 正向代理和反向代理的异同"></a>1.4 正向代理和反向代理的异同</h2><p><strong>相同点</strong></p>
<p>正向代理和反向代理所处的位置都是客户端和真实服务器之间，所做的事情也都是把客户端的请求转发给服务器，再把服务器的响应转发给客户端。</p>
<p><strong>不同点</strong></p>
<p>正向代理是客户端的代理，服务器不知道真正的客户端是谁；反向代理是服务器的代理，客户端不知道真正的服务器是谁</p>
<p>正向代理一般是客户端架设的；反向代理一般是服务器架设的</p>
<p>正向代理主要是用来解决访问限制问题；反向代理则是提供负载均衡、安全防护等作用。二者都能提高访问速度</p>
<h2 id="1-5-通过故事理解正向代理和反向代理"><a href="#1-5-通过故事理解正向代理和反向代理" class="headerlink" title="1.5 通过故事理解正向代理和反向代理"></a>1.5 通过故事理解正向代理和反向代理</h2><p><strong>（正向代理）</strong></p>
<p>同学 A 急需一笔钱，他直接向富豪马云借钱，但是他俩之间毫无关系，结果当然是没有借到。经过一番打听，同学 A 的老师王先生是马云的好朋友，于是 A 同学请求王老师，让王老师帮忙向马云借钱，最终马云同意借钱给王老师，王老师把这笔钱转交给了 A 同学。</p>
<p>上文就相当于一个正向代理的过程，A 同学为客户端，马云为服务器，王老师为正向代理。A 同学请求王老师向马云借钱，这个过程中 A 同学隐藏了自己的角色，马云事实上是不知道到底是谁借的钱。相当于服务器不知道真正发起请求的客户端是谁。</p>
<p><strong>（反向代理）</strong></p>
<p>如果遇到困难需要拨打 10086 客服电话，可能一个地区的 10086 客服有几十个，但是我们不需要关心电话那头的人是谁。只需要拨通 10086 的总机号码，电话那头总有客服会回应。</p>
<p>这里的 10086 总机号码就相当于反向代理，客户端不知道真正提供服务的人是谁。</p>
<h2 id="1-6-负载均衡"><a href="#1-6-负载均衡" class="headerlink" title="1.6 负载均衡"></a>1.6 负载均衡</h2><p>负载均衡，顾名思义就是将负载分摊到多个系统中进行处理，达到均衡的状态。</p>
<p>随着互联网不断发展，网站的访问量也在不断增加。如果只依靠单台服务器进行处理，可能会遇到瓶颈，导致整个网站崩溃。而采用负载均衡的方式，可以将负载分摊到多台服务器上进行处理，提高整个系统的稳定性和吞吐量。</p>
<p>另外，负载均衡还可以提高网站的可用性。在某些情况下，某些服务器可能出现故障，无法正常工作。但是采用负载均衡的方式，可以将故障服务器的负载转移到其他正常的服务器上，确保网站一直处于可用状态。</p>
<h2 id="1-7-动静分离"><a href="#1-7-动静分离" class="headerlink" title="1.7 动静分离"></a>1.7 动静分离</h2><p>动静分离是指在 web 服务器架构中，将静态页面与动态页面或者静态内容接口和动态内容接口分开不同系统访问的架构设计方法，进而提升整个服务访问性能和可维护性。</p>
<h1 id="2-Nginx-的安装"><a href="#2-Nginx-的安装" class="headerlink" title="2.Nginx 的安装"></a>2.Nginx 的安装</h1><h2 id="2-1-基本安装与启动"><a href="#2-1-基本安装与启动" class="headerlink" title="2.1 基本安装与启动"></a>2.1 基本安装与启动</h2><p>1）使用远程连接工具连接 linux 操作系统</p>
<p>2）<a class="link"   href="https://nginx.org/" >https://nginx.org/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>3）安装 nginx</p>
<p>把安装压缩文件放到 linux 系统中</p>
<p>解压缩 nginx-xx.tar.gz 包<code>tar -xvf nginx-xx.tar.gz</code></p>
<p>进入解压缩目录,执行<code>./configure</code></p>
<p>4）nginx 相关素材（依赖）</p>
<p><strong>安装 gcc</strong></p>
<p>yum install -y gcc</p>
<p><strong>安装 perl 库</strong></p>
<p>yum install -y pcre pcre-devel</p>
<p><strong>安装 zlib 库</strong></p>
<p>yum install -y zlib zlib-devel</p>
<p><strong>执行命令<code>./configure --prefix=/usr/local/nginx</code></strong></p>
<p>接下来执行：</p>
<p><code>make &amp;&amp; make install</code></p>
<p>安装成功之后,在&#x2F;usr 下多出一个文件夹 local&#x2F;nginx,在 nginx 里边有 sbin 有启动脚本</p>
<p>5）启动 nginx</p>
<p>进入&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">./nginx 启动</span><br><span class="line">./nginx -s stop 快速停止</span><br><span class="line">./nginx -s quit 优雅关闭<span class="punctuation">,</span>在退出前完成已经接受的连接请求</span><br><span class="line">./nginx -s reload 重新加载配置</span><br><span class="line">./nginx -v 查看版本号</span><br></pre></td></tr></table></figure></div>

<p>6）关闭防火墙</p>
<p><code>systemctl stop firewalld.service</code></p>
<p>禁止防火墙开机启动</p>
<p><code>systemctl disable firewalld.service</code></p>
<p>重启防火墙</p>
<p><code>firewall -cmd --reload</code></p>
<p>浏览器再次访问,成功</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/nginx.png"
                     
                ></p>
<h2 id="2-2-安装成系统服务"><a href="#2-2-安装成系统服务" class="headerlink" title="2.2 安装成系统服务"></a>2.2 安装成系统服务</h2><p>创建服务脚本</p>
<p><code>vi /usr/lib/systemd/system/nginx.service</code></p>
<p>服务脚本内容</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx -  web server</span><br><span class="line">After=network.target remote-fs.target nss-1ookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/usr/local/nginx/logs/nginx.pid</span><br><span class="line">ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">ExecQuit=/usr/local/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></div>

<p>重新加载系统服务</p>
<p><code>systemctl daemon-reload</code></p>
<p>查看先前启动的服务还在不在</p>
<p><code>ps -ef | grep nginx</code></p>
<p>关闭 nginx</p>
<p><code>./nginx -s stop</code></p>
<p>启动服务</p>
<p><code>systemctl start nginx.service</code></p>
<p>开机启动</p>
<p><code>systemctl enable nginx.service</code></p>
<p>查看状态</p>
<p><code>systemctl status nginx.service</code></p>
<h1 id="3-Nginx-配置文件"><a href="#3-Nginx-配置文件" class="headerlink" title="3.Nginx 配置文件"></a>3.Nginx 配置文件</h1><p>nginx 配置文件位置：<code>/usr/local/nginx/conf/nginx.conf</code></p>
<p>nginx 配置文件由三部分组成</p>
<h2 id="第一部分：全局块"><a href="#第一部分：全局块" class="headerlink" title="第一部分：全局块"></a>第一部分：全局块</h2><p><strong>从配置文件开始到 events 块之间的内容，主要会设置一些影响 nginx 服务器整体运行的配置指令</strong>，主要包括配置运行 Nginx 服务器的用户(组)、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以及配置文件的引入等。</p>
<p>比如上面第一行配置的：</p>
<p><code>worker_processes  1;</code></p>
<p>这是 Nginx 服务器并发处理服务的关键配置，<strong>worker_processes 值越大，可以支持的并发处理量也越多</strong>，但是会受到硬件、软件等设备的制约</p>
<h2 id="第二部分：events-块"><a href="#第二部分：events-块" class="headerlink" title="第二部分：events 块"></a>第二部分：events 块</h2><p>比如上面的配置：</p>
<p><code>events &#123;     worker_connections  1024; &#125;</code></p>
<p><strong>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接</strong>，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。</p>
<p><strong>上述例子就表示每个 work process 支持的最大连接数为 1024</strong>。</p>
<p>这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。</p>
<h2 id="第三部分：http-块"><a href="#第三部分：http-块" class="headerlink" title="第三部分：http 块"></a>第三部分：http 块</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">include mime.types;</span><br><span class="line">default_type application/octet-stream;</span><br><span class="line">sendfile on;</span><br><span class="line">keepalive_timeout 65;</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这算是<strong>Nginx 服务器配置中最频繁的部分</strong>，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</p>
<p>需要注意的是:<strong>http 块也可以包括 http 全局块、server 块</strong>。</p>
<h3 id="①http-全局块"><a href="#①http-全局块" class="headerlink" title="①http 全局块"></a>①http 全局块</h3><p>http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</p>
<h3 id="②server-块"><a href="#②server-块" class="headerlink" title="②server 块"></a>②server 块</h3><p>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。</p>
<p>每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。</p>
<p>而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。</p>
<p><strong>1、全局 server 块</strong></p>
<p>最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。</p>
<p><strong>2、location 块</strong></p>
<p>一个 server 块可以配置多个 location 块。</p>
<p>这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name&#x2F;uri-string )，对虚拟主机名称(也可以是 IP 别名)之外的字符串(例如前面的&#x2F;uri-string)进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>React分页功能实现</title>
    <url>/2023/11/13/React%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>静态页面分页，定义 dataList 数组模拟后端返回数据</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="highlight-container" data-rel="Tsx"><figure class="iseeu highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&quot;./index.scss&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Pagination</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RightOutlined</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@ant-design/icons&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavLink</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Trends</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dataList = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;科技成果科技成果科技成果科技成果科技成果科技成果科技成果&quot;</span>,</span><br><span class="line">      <span class="attr">time</span>: <span class="string">&quot;2023-11-13 12:21&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;科技成果科技成果科技成果科技成果科技成果科技成果科技成果&quot;</span>,</span><br><span class="line">      <span class="attr">time</span>: <span class="string">&quot;2023-11-13 12:21&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;科技成果科技成果科技成果科技成果科技成果科技成果科技成果&quot;</span>,</span><br><span class="line">      <span class="attr">time</span>: <span class="string">&quot;2023-11-13 12:21&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;科技成果科技成果科技成果科技成果科技成果科技成果科技成果&quot;</span>,</span><br><span class="line">      <span class="attr">time</span>: <span class="string">&quot;2023-11-13 12:21&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;科技成果科技成果科技成果科技成果科技成果科技成果科技成果&quot;</span>,</span><br><span class="line">      <span class="attr">time</span>: <span class="string">&quot;2023-11-13 12:21&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="attr">title</span>:</span><br><span class="line">        <span class="string">&quot;科技成果科技成果科技成果科技成果科技成果科技成果科技成果科技成果科技成果科技成果科技成果科技成果科技成果科技成果&quot;</span>,</span><br><span class="line">      <span class="attr">time</span>: <span class="string">&quot;2023-11-13 12:21&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">7</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;科技成果科技成果科技成果科技成果科技成果&quot;</span>,</span><br><span class="line">      <span class="attr">time</span>: <span class="string">&quot;2023-11-13 12:21&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">8</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;科技成果科技成果科技成果科技成果科技成果科技成果科技成果&quot;</span>,</span><br><span class="line">      <span class="attr">time</span>: <span class="string">&quot;2023-11-13 12:21&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">9</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;科技成果科技成果科技成果科技成果科技成果科技成果科技成果&quot;</span>,</span><br><span class="line">      <span class="attr">time</span>: <span class="string">&quot;2023-11-13 12:21&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;科技成果科技成果科技成果科技成果科技成果科技成果科技成果&quot;</span>,</span><br><span class="line">      <span class="attr">time</span>: <span class="string">&quot;2023-11-13 12:21&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">11</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;科技成果科技成果科技成果科技成果&quot;</span>,</span><br><span class="line">      <span class="attr">time</span>: <span class="string">&quot;2023-11-13 12:21&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">12</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;科技成果科技成果科技成果科技成果科技成果科技成果科技成果&quot;</span>,</span><br><span class="line">      <span class="attr">time</span>: <span class="string">&quot;2023-11-13 12:21&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">13</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;科技成果科技成果科技成果科技成果科技成果&quot;</span>,</span><br><span class="line">      <span class="attr">time</span>: <span class="string">&quot;2023-11-13 12:21&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">const</span> [page, setPage] = <span class="title function_">useState</span>(<span class="number">1</span>); <span class="comment">//当前页码</span></span><br><span class="line">  <span class="keyword">const</span> total = dataList.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> [todosPerPage, setTodosPerPage] = <span class="title function_">useState</span>(<span class="number">10</span>); <span class="comment">//存储每页上的项目数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> lastTodoInView = page * todosPerPage;</span><br><span class="line">  <span class="keyword">const</span> firstTodoInView = lastTodoInView - todosPerPage;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> todosForDisplay = dataList.<span class="title function_">slice</span>(firstTodoInView, lastTodoInView);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">pageNumber: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setPage</span>(pageNumber);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">backgroundColor:</span> &quot;#<span class="attr">f6f6f6</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.trends&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">RightOutlined</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/science&quot;</span>&gt;</span>科技成果<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.title&#125;</span>&gt;</span>科技成果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.trendsInner&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;todosForDisplay.map((item: any) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            return (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">NavLink</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">science</span>/<span class="attr">scienceDetail</span>/$&#123;<span class="attr">item.id</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">className</span>=<span class="string">&#123;styles.trends_item&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.text&#125;</span>&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.time&#125;</span>&gt;</span>&#123;item.time&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            );</span></span><br><span class="line"><span class="language-xml">          &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Pagination</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&#123;styles.pagination&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">defaultCurrent</span>=<span class="string">&#123;1&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">current</span>=<span class="string">&#123;page&#125;</span> //<span class="attr">当前页码</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">total</span>=<span class="string">&#123;total&#125;</span> //<span class="attr">总页数</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">pageSize</span>=<span class="string">&#123;todosPerPage&#125;</span> //<span class="attr">存储每页上的项目数</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>主要考验了对 slice 方法的掌握</p>
<h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>slice() 方法可从已有的数组中返回选定的元素。</p>
<p>slice()方法可提取字符串的某个部分，并以新的字符串返回被提取的部分。</p>
<p><strong>注意：</strong> slice() 方法不会改变原始数组。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>array.slice(start, end)</code></p>
<h2 id="参数-Values"><a href="#参数-Values" class="headerlink" title="参数 Values"></a>参数 Values</h2><table>
<thead>
<tr>
<th>参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td><em>start</em></td>
<td align="left">可选。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</td>
</tr>
<tr>
<td><em>end</em></td>
<td align="left">可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</td>
</tr>
</tbody></table>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><table>
<thead>
<tr>
<th align="left">Type</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Array</td>
<td>返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。</td>
</tr>
</tbody></table>
<p>更多实例与解析见【菜鸟教程】<br><a class="link"   href="http://doc.yaojieyun.com/www.runoob.com/jsref/jsref-slice-array.html" >http://doc.yaojieyun.com/www.runoob.com/jsref/jsref-slice-array.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript数据过滤</title>
    <url>/2023/11/17/JavaScript%E6%95%B0%E6%8D%AE%E8%BF%87%E6%BB%A4/</url>
    <content><![CDATA[<h3 id="1、-使用-filter-方法"><a href="#1、-使用-filter-方法" class="headerlink" title="1、 使用 filter()方法"></a>1、 使用 filter()方法</h3><p><code>filter()</code> 方法可以<strong>根据指定的条件筛选出满足条件的元素，并返回一个新的数组</strong>。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> filteredArr = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num &gt; <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filteredArr); <span class="comment">// 输出 [4, 5]</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2、使用-find-方法"><a href="#2、使用-find-方法" class="headerlink" title="2、使用 find()方法"></a>2、使用 find()方法</h3><p><code>find()</code> 方法用于<strong>查找并返回数组中满足指定条件的第一个元素</strong>。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> filteredElement = arr.<span class="title function_">find</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num &gt; <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filteredElement); <span class="comment">// 输出 4</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3、使用-findIndex-方法"><a href="#3、使用-findIndex-方法" class="headerlink" title="3、使用 findIndex()方法"></a>3、使用 findIndex()方法</h3><p><code>findIndex()</code>方法返回<strong>数组中符合指定条件的第一个元素的索引，如果找不到满足条件的元素，将返回 -1</strong>。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> filteredIndex = arr.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num &gt; <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filteredIndex); <span class="comment">// 输出 3</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4、使用-reduce-方法"><a href="#4、使用-reduce-方法" class="headerlink" title="4、使用 reduce()方法"></a>4、使用 reduce()方法</h3><p><code>reduce()</code> 方法可以利用累加器函数对数组中的元素进行累积计算，然后返回一个结果。我们可以在回调函数中添加过滤条件，只保留符合条件的元素也，可以实现数组过滤的功能。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> filteredArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    filteredArr.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filteredArr); <span class="comment">// 输出 [4, 5]</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> evenSum = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (num % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> acc + num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> acc;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(evenSum); <span class="comment">// 输出 6 (2 + 4)</span></span><br></pre></td></tr></table></figure></div>

<h3 id="5、使用-includes-方法"><a href="#5、使用-includes-方法" class="headerlink" title="5、使用 includes()方法"></a>5、使用 includes()方法</h3><p><code>includes()</code>方法用于<strong>检查数组是否包含指定的元素</strong>。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> includesThree = arr.<span class="title function_">includes</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(includesThree); <span class="comment">// 输出 true</span></span><br></pre></td></tr></table></figure></div>

<h3 id="6、使用-some-方法"><a href="#6、使用-some-方法" class="headerlink" title="6、使用 some()方法"></a>6、使用 some()方法</h3><p><code>some()</code>方法用于<strong>检查数组中是否至少存在一个元素满足指定条件</strong>。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> hasGreaterThanThree = arr.<span class="title function_">some</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num &gt; <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hasGreaterThanThree); <span class="comment">// 输出 true</span></span><br></pre></td></tr></table></figure></div>

<h3 id="7、-使用-every-方法"><a href="#7、-使用-every-方法" class="headerlink" title="7、 使用 every()方法"></a>7、 使用 every()方法</h3><p><code>every()</code>方法用于<strong>检查数组中是否所有元素都满足指定条件</strong>。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> allGreaterThanZero = arr.<span class="title function_">every</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num &gt; <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(allGreaterThanZero); <span class="comment">// 输出 true</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>一些Css样式整理</title>
    <url>/2023/11/17/%E4%B8%80%E4%BA%9BCss%E6%A0%B7%E5%BC%8F%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="文本超出省略号"><a href="#文本超出省略号" class="headerlink" title="文本超出省略号"></a>文本超出省略号</h2><p>通过 css 设置文字强制不换行超出用省略号表示:</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap; 文本强制不换行；</span><br><span class="line">    <span class="attribute">text-overflow</span>:ellipsis; 文本溢出显示省略号；</span><br><span class="line">    <span class="attribute">overflow</span>:hidden; 溢出的部分隐藏；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>如果要想显示两行超出用省略号表示:</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="背景颜色线性渐变"><a href="#背景颜色线性渐变" class="headerlink" title="背景颜色线性渐变"></a>背景颜色线性渐变</h2><p>CSS：linear-gradient()背景颜色线性渐变</p>
<p>语法：</p>
<p><code>background-image: linear-gradient(direction, color-stop1, color-stop2, ...);</code></p>
<p>direction：用角度值指定渐变的方向（或角度）；</p>
<p>color-stop1,color-stop2,…：用于指定渐变的起止颜色</p>
<p>_ps_：至少需要两种颜色</p>
<table>
<thead>
<tr>
<th>方向</th>
<th>枚举值</th>
<th>角度值</th>
</tr>
</thead>
<tbody><tr>
<td>从下到上</td>
<td>to top</td>
<td>0deg</td>
</tr>
<tr>
<td>从左到右</td>
<td>to right</td>
<td>90deg</td>
</tr>
<tr>
<td>从上到下（默认）</td>
<td>to bottom</td>
<td>180deg</td>
</tr>
<tr>
<td>从右到左</td>
<td>to left</td>
<td>270deg</td>
</tr>
</tbody></table>
<p>举例：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#feac5e</span>, <span class="number">#c779d0</span>, <span class="number">#4bc0c8</span>);</span><br></pre></td></tr></table></figure></div>

<p>效果如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/example.png"
                     
                ></p>
<h2 id="CSS-实现鼠标移动到图片上图片变大，不改变盒子大小"><a href="#CSS-实现鼠标移动到图片上图片变大，不改变盒子大小" class="headerlink" title="CSS 实现鼠标移动到图片上图片变大，不改变盒子大小"></a>CSS 实现鼠标移动到图片上图片变大，不改变盒子大小</h2><p>实现鼠标经过图片时，图片等比放大，但是图片的父盒子不会改变；主要使用了<code>css</code>的动画来实现。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="comment">/* 设置overflow: hidden 当放大的时候超出部分隐藏 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: all <span class="number">0.8s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>);</span><br><span class="line">  -ms-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p>慢慢整理……</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title>git总结</title>
    <url>/2023/11/28/git%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/git.png"
                     
                ></p>
<blockquote>
<ul>
<li>Workspace：工作区</li>
<li>Index &#x2F; Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
</blockquote>
<h1 id="1-git-配置命令"><a href="#1-git-配置命令" class="headerlink" title="1. git 配置命令"></a>1. git 配置命令</h1><h2 id="查询配置信息"><a href="#查询配置信息" class="headerlink" title="查询配置信息"></a>查询配置信息</h2><ol>
<li>列出当前配置：<code>git config --list</code>;</li>
<li>列出 repository 配置：<code>git config --local --list</code>;</li>
<li>列出全局配置：<code>git config --global --list</code>;</li>
<li>列出系统配置：<code>git config --system --list</code>;</li>
</ol>
<h2 id="第一次使用-git，配置用户信息"><a href="#第一次使用-git，配置用户信息" class="headerlink" title="第一次使用 git，配置用户信息"></a>第一次使用 git，配置用户信息</h2><ol>
<li>配置用户名：<code>git config --global user.name &quot;your name&quot;</code>;</li>
<li>配置用户邮箱：<code>git config --global user.email &quot;youremail@github.com&quot;</code>;</li>
</ol>
<h1 id="2-工作区上的操作命令"><a href="#2-工作区上的操作命令" class="headerlink" title="2. 工作区上的操作命令"></a>2. 工作区上的操作命令</h1><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><ol>
<li>将工作区中的项目文件使用 git 进行管理，即创建一个新的本地仓库：<code>git init</code>；</li>
<li>从远程 git 仓库复制项目：<code>git clone &lt;url&gt;</code>，如：<code>git clone git://github.com/wasd/example.git</code>;克隆项目时如果想定义新的项目名，可以在 clone 命令后指定新的项目名：<code>git clone git://github.com/wasd/example.git mygit</code>；</li>
</ol>
<h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><ol>
<li>提交工作区所有文件到暂存区：<code>git add .</code></li>
<li>提交工作区中指定文件到暂存区：<code>git add &lt;file1&gt; &lt;file2&gt; ...</code>;</li>
<li>提交工作区中某个文件夹中所有文件到暂存区：<code>git add [dir]</code>;</li>
</ol>
<h2 id="查询信息"><a href="#查询信息" class="headerlink" title="查询信息"></a>查询信息</h2><ol>
<li>查询当前工作区所有文件的状态：<code>git status</code>;</li>
</ol>
<h1 id="3-暂存区上的操作命令"><a href="#3-暂存区上的操作命令" class="headerlink" title="3.暂存区上的操作命令"></a>3.暂存区上的操作命令</h1><h2 id="提交文件到版本库"><a href="#提交文件到版本库" class="headerlink" title="提交文件到版本库"></a>提交文件到版本库</h2><ol>
<li>将暂存区中的文件提交到本地仓库中，即打上新版本：<code>git commit -m &quot;commit_info&quot;</code>;</li>
<li>将所有已经使用 git 管理过的文件暂存后一并提交，跳过 add 到暂存区的过程：<code>git commit -a -m &quot;commit_info&quot;</code>;</li>
<li>提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交：<code>git commit --amend</code>;</li>
</ol>
<h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><ol>
<li>比较暂存区与上一版本的差异：<code>git diff --cached</code>;</li>
<li>指定文件在暂存区和本地仓库的不同：<code>git diff &lt;file-name&gt; --cached</code>;</li>
<li>查看提交历史：<code>git log</code>；参数<code>-p</code>展开每次提交的内容差异，用<code>-2</code>显示最近的两次更新，如<code>git log -p -2</code>;</li>
</ol>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><ol>
<li>创建分支：<code>git branch &lt;branch-name&gt;</code>，如<code>git branch testing</code>；</li>
<li>从当前所处的分支切换到其他分支：<code>git checkout &lt;branch-name&gt;</code>，如<code>git checkout testing</code>；</li>
<li>新建并切换到新建分支上：<code>git checkout -b &lt;branch-name&gt;</code>;</li>
<li>删除分支：<code>git branch -d &lt;branch-name&gt;</code>；</li>
<li>将当前分支与指定分支进行合并：<code>git merge &lt;branch-name&gt;</code>;</li>
<li>显示本地仓库的所有分支：<code>git branch</code>;</li>
<li>查看各个分支最后一个提交对象的信息：<code>git branch -v</code>;</li>
<li>查看哪些分支已经合并到当前分支：<code>git branch --merged</code>;</li>
<li>查看当前哪些分支还没有合并到当前分支：<code>git branch --no-merged</code>;</li>
<li>把远程分支合并到当前分支：<code>git merge &lt;remote-name&gt;/&lt;branch-name&gt;</code>，如<code>git merge origin/serverfix</code>；如果是单线的历史分支不存在任何需要解决的分歧，只是简单的将 HEAD 指针前移，所以这种合并过程可以称为快进（Fast forward），而如果是历史分支是分叉的，会以当前分叉的两个分支作为两个祖先，创建新的提交对象；如果在合并分支时，遇到合并冲突需要人工解决后，再才能提交；</li>
<li>在远程分支的基础上创建新的本地分支<code>：git checkout -b &lt;branch-name&gt; &lt;remote-name&gt;/&lt;branch-name&gt;</code>，如<code>git checkout -b serverfix origin/serverfix</code>;</li>
<li>从远程分支 checkout 出来的本地分支，称之为跟踪分支。在跟踪分支上向远程分支上推送内容：<code>git push</code>。该命令会自动判断应该向远程仓库中的哪个分支推送数据；在跟踪分支上合并远程分支：<code>git pull</code>；</li>
<li>将一个分支里提交的改变移到基底分支上重放一遍：<code>git rebase &lt;rebase-branch&gt; &lt;branch-name&gt;</code>，如<code>git rebase master server</code>，将特性分支 server 提交的改变在基底分支 master 上重演一遍；使用 rebase 操作最大的好处是像在单个分支上操作的，提交的修改历史也是一根线；如果想把基于一个特性分支上的另一个特性分支变基到其他分支上，可以使用<code>--onto</code>操作：<code>git rebase --onto &lt;rebase-branch&gt; &lt;feature branch&gt; &lt;sub-feature-branch&gt;</code>，如<code>git rebase --onto master server client</code>；使用 rebase 操作应该遵循的原则是：<strong>一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行 rebase 操作</strong>；</li>
</ol>
<h1 id="5-本地仓库上的操作"><a href="#5-本地仓库上的操作" class="headerlink" title="5.本地仓库上的操作"></a>5.本地仓库上的操作</h1><ol>
<li>查看本地仓库关联的远程仓库：<code>git remote</code>；在克隆完每个远程仓库后，远程仓库默认为<code>origin</code>;加上<code>-v</code>的参数后，会显示远程仓库的<code>url</code>地址；</li>
<li>添加远程仓库，一般会取一个简短的别名：<code>git remote add [remote-name] [url]</code>，比如：<code>git remote add example git://github.com/example/example.git</code>;</li>
<li>从远程仓库中抓取本地仓库中没有的更新：<code>git fetch [remote-name]</code>，如<code>git fetch origin</code>;使用 fetch 只是将远端数据拉到本地仓库，并不自动合并到当前工作分支，只能人工合并。如果设置了某个分支关联到远程仓库的某个分支的话，可以使用<code>git pull</code>来拉去远程分支的数据，然后将远端分支自动合并到本地仓库中的当前分支；</li>
<li>将本地仓库某分支推送到远程仓库上：<code>git push [remote-name] [branch-name]</code>，如<code>git push origin master</code>；如果想将本地分支推送到远程仓库的不同名分支：<code>git push &lt;remote-name&gt; &lt;local-branch&gt;:&lt;remote-branch&gt;</code>，如<code>git push origin serverfix:awesomebranch</code>;如果想删除远程分支：<code>git push [romote-name] :&lt;remote-branch&gt;</code>，如<code>git push origin :serverfix</code>。这里省略了本地分支，也就相当于将空白内容推送给远程分支，就等于删掉了远程分支。</li>
<li>查看远程仓库的详细信息：<code>git remote show origin</code>；</li>
<li>修改某个远程仓库在本地的简称：<code>git remote rename [old-name] [new-name]</code>，如<code>git remote rename origin org</code>；</li>
<li>移除远程仓库：<code>git remote rm [remote-name]</code>；</li>
</ol>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>新建仓库<code>git init</code></p>
<p>克隆<code>git clone &lt;url&gt;</code></p>
<p>提交到暂存区<code>git add .</code></p>
<p>提交到本地仓库<code>git commit -m &#39;描述信息&#39;</code></p>
<p>添加远程仓库<code>git remote add [remote-name] [url]</code></p>
<p>拉取<code>git pull</code></p>
<p>推送<code>git push origin master</code></p>
<hr>
<p>参考：<a class="link"   href="https://juejin.cn/post/6844903598522908686" >https://juejin.cn/post/6844903598522908686 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>一些项目总结</title>
    <url>/2023/11/28/%E4%B8%80%E4%BA%9B%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="dangerouslySetInnerHTML"><a href="#dangerouslySetInnerHTML" class="headerlink" title="dangerouslySetInnerHTML"></a>dangerouslySetInnerHTML</h1><p><code>dangerouslySetInnerHTML</code>，翻译过来就是：危险的设置内部 HTML。</p>
<p><code>dangerouslySetInnerHTML</code>是 React 中的一个属性，它允许您将 HTML 作为字符串直接插入到组件中。使用<code>dangerouslySetInnerHTML</code>属性时，您必须传递一个对象，该对象具有一个名为<code>__html</code>的属性，该属性包含您要插入到组件中的 HTML 字符串。<code>dangerouslySetInnerHTML</code>是 React 中的一个属性，它允许您将 HTML 作为字符串直接插入到组件中。使用<code>dangerouslySetInnerHTML</code>属性时，您必须传递一个对象，该对象具有一个名为<code>__html</code>的属性，该属性包含您要插入到组件中的 HTML 字符串。</p>
<p>以下是一个示例：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> htmlString = <span class="string">&quot;&lt;div&gt;Hello, world!&lt;/div&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;&#123;</span> <span class="attr">__html:</span> <span class="attr">htmlString</span> &#125;&#125; /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>请注意，使用<code>dangerouslySetInnerHTML</code>属性时需要格外小心，因为它可以导致<a class="link"   href="https://so.csdn.net/so/search?q=%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB&spm=1001.2101.3001.7020" >跨站脚本攻击 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（XSS）和其他安全问题。请确保您信任要插入的 HTML，并在可能的情况下使用更安全的方法来渲染内容。</p>
<h1 id="封装时间格式化函数"><a href="#封装时间格式化函数" class="headerlink" title="封装时间格式化函数"></a>封装时间格式化函数</h1><p>Moment.js 是一个轻量级的 JavaScript 时间库。官网：<a class="link"   href="http://momentjs.cn/" >http://momentjs.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><code>npm install moment --save</code>或者<code>yarn add moment</code>安装</p>
<p>在<code>/src/utils/index.ts</code></p>
<div class="highlight-container" data-rel="Tsx"><figure class="iseeu highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&quot;moment&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;moment/dist/locale/zh-cn&quot;</span>;</span><br><span class="line"></span><br><span class="line">moment.<span class="title function_">locale</span>(<span class="string">&quot;zh-cn&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getFormatTime</span> = (<span class="params">time: <span class="built_in">string</span> | <span class="built_in">number</span>, format?: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  format = format || <span class="string">&quot;lll&quot;</span>;</span><br><span class="line">  <span class="comment">// 由于后端时间是0区时间</span></span><br><span class="line">  <span class="comment">// const s = &#x27;2023-11-28T14:51:31+08:00&#x27;;</span></span><br><span class="line">  <span class="comment">// return moment(time).utcOffset(s).format(format);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">moment</span>(time).<span class="title function_">format</span>(format);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>页面中引用</p>
<div class="highlight-container" data-rel="Tsx"><figure class="iseeu highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getFormatTime &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFormatTime</span>(<span class="string">&quot;2023-11-28T14:51:31+08:00&quot;</span>));</span><br><span class="line"><span class="comment">//2023-11-28T14:51:31+08:00   =&gt;   2023年11月28日 14:51</span></span><br></pre></td></tr></table></figure></div>

<h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>我在运营项目对接接口的时候遇到了每次发出请求都报 401 登录过期的错误，询问老师后知道了解决方法。</p>
<p>这段代码是使用了 Axios 的拦截器，用于在每次发送 HTTP 请求时自动添加一个 token 到请求头中。这个 token 从 localStorage 中获取（登录成功时存到 localStorage 中），并且以 Bearer 开头的形式添加到 Authorization 头中。</p>
<p><code>/src/request/index.ts</code></p>
<div class="highlight-container" data-rel="Tsx"><figure class="iseeu highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="comment">// 基本请求路径的抽取</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&quot;/api&quot;</span>,</span><br><span class="line">  <span class="comment">// 这个时间是你每次请求的过期时间，这次请求认为30秒之后这个请求就是失败的</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">30000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>); <span class="comment">// 从localStorage获取token</span></span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>; <span class="comment">// 在请求头中添加token</span></span><br><span class="line">    <span class="keyword">return</span> config; <span class="comment">// 返回配置对象</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err); <span class="comment">// 如果发生错误，返回一个被拒绝的Promise</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">401</span>) &#123;</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">      location.<span class="property">href</span> = <span class="string">&quot;/login&quot;</span>;</span><br><span class="line">      message.<span class="title function_">info</span>(<span class="string">&quot;登录过期,请重新登录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    message.<span class="title function_">error</span>(<span class="string">&quot;请求失败&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance;</span><br></pre></td></tr></table></figure></div>

<p>然后可以在<code>/src/request/api.ts</code>中统一接口调用地址方便后期修改,例如：</p>
<div class="highlight-container" data-rel="Tsx"><figure class="iseeu highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 统一管理项目中所有的请求路径 api</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;./index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">LoginAPI</span> = (<span class="params">params: <span class="built_in">any</span></span>) =&gt;</span><br><span class="line">  request.<span class="title function_">post</span>(<span class="string">&quot;/system/passport/login&quot;</span>, params);</span><br><span class="line"></span><br><span class="line"><span class="comment">//   首页配置项</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">HomePostAPI</span> = (<span class="params">params: <span class="built_in">any</span></span>) =&gt;</span><br><span class="line">  request.<span class="title function_">post</span>(<span class="string">&quot;/config/index/save&quot;</span>, params);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">HomeGetAPI</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  request.<span class="title function_">get</span>(<span class="string">&quot;/config/index/data?page=1&amp;page_size=10&quot;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">HomeDelAPI</span> = (<span class="params">params: <span class="built_in">any</span></span>) =&gt;</span><br><span class="line">  request.<span class="title function_">delete</span>(<span class="string">`/config/index/delete/<span class="subst">$&#123;params&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">HomePutAPI</span> = (<span class="params">params: <span class="built_in">any</span></span>) =&gt;</span><br><span class="line">  request.<span class="title function_">put</span>(<span class="string">`/config/index/update`</span>, params);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">HomeReleaseAPI</span> = (<span class="params">params: <span class="built_in">any</span></span>) =&gt;</span><br><span class="line">  request.<span class="title function_">put</span>(<span class="string">`/config/index/release`</span>, params);</span><br><span class="line">......</span><br></pre></td></tr></table></figure></div>

<h1 id="前置路由守卫"><a href="#前置路由守卫" class="headerlink" title="前置路由守卫"></a>前置路由守卫</h1><p>好久之前跟着哔哩哔哩项目实战敲的，目前做的两个项目都用到了，直接贴代码了。<a class="link"   href="https://www.bilibili.com/video/BV1FV4y157Zx?p=1&vd_source=8a5aa661a7cb39369bcb5f48bc70a521" >https://www.bilibili.com/video/BV1FV4y157Zx?p=1&amp;vd_source=8a5aa661a7cb39369bcb5f48bc70a521 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><code>/src/App.tsx</code></p>
<div class="highlight-container" data-rel="Tsx"><figure class="iseeu highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRoutes, useLocation, useNavigate &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ToHome</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> navigateTo = <span class="title function_">useNavigate</span>();</span><br><span class="line">  <span class="comment">//加载完这个组件之后实现跳转</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//加载完组件之后执行这里的代码</span></span><br><span class="line">    <span class="title function_">navigateTo</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    message.<span class="title function_">warning</span>(<span class="string">&quot;您已经登录过了!&quot;</span>);</span><br><span class="line">  &#125;, [navigateTo]);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ToLogin</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> navigateTo = <span class="title function_">useNavigate</span>();</span><br><span class="line">  <span class="comment">//加载完这个组件之后实现跳转</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//加载完组件之后执行这里的代码</span></span><br><span class="line">    <span class="title function_">navigateTo</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    message.<span class="title function_">warning</span>(<span class="string">&quot;您还没有登录,请登录后再访问!&quot;</span>);</span><br><span class="line">  &#125;, [navigateTo]);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 手写路由封装守卫</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">BeforeRouterEnter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> outlet = <span class="title function_">useRoutes</span>(router);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    后台管理系统两种经典的跳转情况:</span></span><br><span class="line"><span class="comment">    1、如果访问的是登录页面，并且有token，跳转到首页</span></span><br><span class="line"><span class="comment">    2、如果访问的不是登录页面，并且没有token，跳转到登录页</span></span><br><span class="line"><span class="comment">    3、其余的都可以正常放行</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">const</span> location = <span class="title function_">useLocation</span>();</span><br><span class="line">  <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (location.<span class="property">pathname</span> === <span class="string">&quot;/login&quot;</span> &amp;&amp; token) &#123;</span><br><span class="line">    <span class="comment">//这里不能直接用useNavigate来实现跳转﹐因为需要BeforeRouterEnter是一个正常的Jsx组件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ToHome</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (location.<span class="property">pathname</span> !== <span class="string">&quot;/login&quot;</span> &amp;&amp; !token) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ToLogin</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> outlet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* 占位符组件 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* &#123;outlet&#125; */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">BeforeRouterEnter</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure></div>

<h1 id="Antd-的-Upload-组件"><a href="#Antd-的-Upload-组件" class="headerlink" title="Antd 的 Upload 组件"></a>Antd 的 Upload 组件</h1><p>项目要求是写一篇文章，可以选择是否需要展示轮播图片。</p>
<p>这个地方传给后端的参数 String 类型的都对，唯独文件 File 这块就是不符合要求，导致无法使用增加文章的接口。请教老师之后做的修改代码。</p>
<ul>
<li>传参改成<code>formData.append()</code>的方式(这个就对应了 postman 带有文件上传的时候要用 form-data 的形式传参)</li>
<li>项目要求轮播图片只上传一张，接口也就要一张，所以给后端的文件键值对不要数组。</li>
</ul>
<div class="highlight-container" data-rel="Tsx"><figure class="iseeu highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上传轮播图片</span></span><br><span class="line"><span class="keyword">const</span> [fileList, setFileList]: <span class="built_in">any</span> = useState&lt;<span class="title class_">UploadFile</span>[]&gt;([]); <span class="comment">//上传的文件列表</span></span><br><span class="line"><span class="keyword">const</span> [nfile, setNfile]: <span class="built_in">any</span> = <span class="title function_">useState</span>(<span class="literal">null</span>); <span class="comment">//上传的文件</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">handleChange</span>: <span class="title class_">UploadProps</span>[<span class="string">&quot;onChange&quot;</span>] = <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  fileList: newFileList,</span></span></span><br><span class="line"><span class="params"><span class="function">  file,</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//限制文件上传格式</span></span><br><span class="line">  <span class="keyword">const</span> isJpgOrPng = file.<span class="property">type</span> === <span class="string">&quot;image/jpeg&quot;</span> || file.<span class="property">type</span> === <span class="string">&quot;image/png&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!isJpgOrPng) &#123;</span><br><span class="line">    message.<span class="title function_">error</span>(<span class="string">&quot;You can only upload JPG/PNG file!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setNfile</span>(file);</span><br><span class="line">  <span class="title function_">setRotation</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="title function_">setFileList</span>(newFileList);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//点击发布按钮</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleSubmit</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title class_">NewsForm</span>.<span class="property">current</span></span><br><span class="line">    .<span class="title function_">validateFields</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setFormInfo</span>(res); <span class="comment">//收集表单数据</span></span><br><span class="line">      <span class="title function_">setIsSureOpen</span>(<span class="literal">true</span>); <span class="comment">//打开Modal框</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&quot;请填写必填项&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//点击确认发布按钮</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleYes</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (content === <span class="string">&quot;&quot;</span> || content.<span class="title function_">trim</span>() === <span class="string">&quot;&lt;p&gt;&lt;/p&gt;&quot;</span>) &#123;</span><br><span class="line">    message.<span class="title function_">error</span>(<span class="string">&quot;内容不能为空&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">    <span class="keyword">if</span> (nfile != <span class="literal">null</span>) &#123;</span><br><span class="line">      formData.<span class="title function_">append</span>(<span class="string">&quot;rotation_pic_url&quot;</span>, nfile); <span class="comment">//文章图片地址</span></span><br><span class="line">    &#125;</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;title&quot;</span>, formInfo.<span class="property">title</span>); <span class="comment">//文章标题</span></span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;source&quot;</span>, formInfo.<span class="property">source</span>); <span class="comment">//文章来源</span></span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;config_type&quot;</span>, formInfo.<span class="property">config_type</span>); <span class="comment">//文章类别</span></span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;is_rotation&quot;</span>, rotation); <span class="comment">//是否轮播，1是2否</span></span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;config_content&quot;</span>, content); <span class="comment">//文章内容</span></span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;1&quot;</span>); <span class="comment">//状态，1草稿2发布3取消发布</span></span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;1&quot;</span>); <span class="comment">//默认作者1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">HomePostAPI</span>(formData).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        notification.<span class="title function_">info</span>(&#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">`通知`</span>,</span><br><span class="line">          <span class="attr">description</span>: <span class="string">&quot;操作成功&quot;</span>,</span><br><span class="line">          <span class="attr">placement</span>: <span class="string">&quot;bottomRight&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span> ? resolve : reject, <span class="number">1000</span>);</span><br><span class="line">        location.<span class="property">href</span> = <span class="string">`/homeConfig/drafts`</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setIsSureOpen</span>(<span class="literal">false</span>); <span class="comment">//关闭Modal框</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Tsx"><figure class="iseeu highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Form</span>.<span class="property">Item</span></span><br><span class="line">  name=<span class="string">&quot;rotation_pic_url&quot;</span></span><br><span class="line">  label=<span class="string">&quot;轮播展示封面&quot;</span></span><br><span class="line">  valuePropName=<span class="string">&quot;rotation_pic_url&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Upload</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">listType</span>=<span class="string">&quot;picture-card&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">fileList</span>=<span class="string">&#123;fileList&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">beforeUpload</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">      return false;</span></span><br><span class="line"><span class="language-xml">    &#125;&#125; //上传文件之前的钩子，参数为上传的文件，若返回 false 则停止上传。</span></span><br><span class="line"><span class="language-xml">  &gt;</span></span><br><span class="line"><span class="language-xml">    &#123;fileList &amp;&amp; fileList.length &gt;= 1 ? null : (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">PlusOutlined</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginTop:</span> <span class="attr">8</span> &#125;&#125;&gt;</span>Upload<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    )&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Upload</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Form</span>.<span class="property">Item</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E9%A1%B9%E7%9B%AEUpload.png"
                     
                ></p>
<h1 id="文件上传与修改"><a href="#文件上传与修改" class="headerlink" title="文件上传与修改"></a>文件上传与修改</h1><p>同样也是继上一个总结之后发现的 Bug，上一个总结中文件确实是可以完美上传了，但是如果表单不仅仅是上传文件，还有其他诸如文章介绍，文章内容等等，当你进行表单修改的时候，你可能不选择修改文件，可这时你会发现，你拿不到已经上传的文件了，你必须上传一个新的文件才能继续进行提交工作。</p>
<p>后来项目需要后端进行一下接口的修改</p>
<p>文件上传与修改逻辑应该是：</p>
<ul>
<li>先调用上传接口，接口会返回一个文件地址，前端再调用创建接口，把地址传给后端。</li>
<li>前端先上传文件，后端给前端返回保存地址，然后新增的时候前端把保存地址和文件名一起再传给后端。</li>
<li>点击上传图片按钮，调用上传接口；点击保存按钮调用创建接口。</li>
</ul>
<p>下面粘贴我的部分代码。我的代码写的不是很好，重点在于理解文件上传修改的逻辑。</p>
<div class="highlight-container" data-rel="Tsx"><figure class="iseeu highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上传轮播图片</span></span><br><span class="line">  <span class="keyword">const</span> [fileList, setFileList]: <span class="built_in">any</span> = useState&lt;<span class="title class_">UploadFile</span>[]&gt;([]); <span class="comment">//文件列表</span></span><br><span class="line">  <span class="keyword">const</span> [fileValue, steFileValue]: <span class="built_in">any</span> = <span class="title function_">useState</span>(&#123;&#125;); <span class="comment">//接口返回的保存地址和文件名称</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">handleChange</span>: <span class="title class_">UploadProps</span>[<span class="string">&quot;onChange&quot;</span>] = <span class="function">(<span class="params">item: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 限制上传格式</span></span><br><span class="line">    <span class="keyword">const</span> isJpgOrPng =</span><br><span class="line">      item.<span class="property">file</span>.<span class="property">type</span> === <span class="string">&quot;image/jpeg&quot;</span> || item.<span class="property">file</span>.<span class="property">type</span> === <span class="string">&quot;image/png&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!isJpgOrPng) &#123;</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&quot;You can only upload JPG/PNG file!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setFileList</span>(item.<span class="property">fileList</span>);</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">fileList</span>.<span class="property">length</span> != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 调用上传接口</span></span><br><span class="line">      <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">      formData.<span class="title function_">append</span>(<span class="string">&quot;upload_file&quot;</span>, item.<span class="property">file</span>);</span><br><span class="line">      <span class="title class_">UploadAPI</span>(formData).<span class="title function_">then</span>(<span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(res.data);</span></span><br><span class="line">        <span class="title function_">steFileValue</span>(res.<span class="property">data</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="title function_">setRotation</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">setRotation</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 提交</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleOK</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title class_">NewsForm</span>.<span class="property">current</span></span><br><span class="line">      .<span class="title function_">validateFields</span>()</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setFormInfo</span>(res);</span><br><span class="line">        <span class="title function_">setIsSureOpen</span>(<span class="literal">true</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">error: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">        message.<span class="title function_">error</span>(<span class="string">&quot;请填写必填项&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//   取消提交</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleCancel</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setIsSureOpen</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="title function_">setPreviewOpen</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//   确认提交</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleYes</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (content === <span class="string">&quot;&quot;</span> || content.<span class="title function_">trim</span>() === <span class="string">&quot;&lt;p&gt;&lt;/p&gt;&quot;</span>) &#123;</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&quot;内容不能为空&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">      <span class="keyword">if</span> (rotation === <span class="number">1</span>) &#123;</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">&quot;rotation_pic_url&quot;</span>, fileValue.<span class="property">save_url</span>);</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">&quot;source_file_name&quot;</span>, fileValue.<span class="property">source_file_name</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      formData.<span class="title function_">append</span>(<span class="string">&quot;title&quot;</span>, formInfo.<span class="property">title</span>);</span><br><span class="line">      formData.<span class="title function_">append</span>(<span class="string">&quot;source&quot;</span>, formInfo.<span class="property">source</span>);</span><br><span class="line">      formData.<span class="title function_">append</span>(<span class="string">&quot;config_type&quot;</span>, formInfo.<span class="property">config_type</span>);</span><br><span class="line">      formData.<span class="title function_">append</span>(<span class="string">&quot;is_rotation&quot;</span>, rotation); <span class="comment">//是否轮播，1是2否</span></span><br><span class="line">      formData.<span class="title function_">append</span>(<span class="string">&quot;config_content&quot;</span>, content);</span><br><span class="line">      formData.<span class="title function_">append</span>(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;1&quot;</span>); <span class="comment">//状态，1草稿2发布3取消发布</span></span><br><span class="line">      formData.<span class="title function_">append</span>(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;1&quot;</span>); <span class="comment">//默认作者1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">HomePostAPI</span>(formData).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          notification.<span class="title function_">info</span>(&#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">`通知`</span>,</span><br><span class="line">            <span class="attr">description</span>: <span class="string">&quot;操作成功&quot;</span>,</span><br><span class="line">            <span class="attr">placement</span>: <span class="string">&quot;bottomRight&quot;</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span> ? resolve : reject, <span class="number">1000</span>);</span><br><span class="line">          location.<span class="property">href</span> = <span class="string">`/homeConfig/drafts`</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;rotation_pic_url&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;轮播展示封面&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">valuePropName</span>=<span class="string">&quot;rotation_pic_url&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Upload</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">listType</span>=<span class="string">&quot;picture-card&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">fileList</span>=<span class="string">&#123;fileList&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onPreview</span>=<span class="string">&#123;handlePreview&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">beforeUpload</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">              return false;</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          &gt;</span></span><br><span class="line"><span class="language-xml">            &#123;fileList &amp;&amp; fileList.length &gt;= 1 ? null : (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">PlusOutlined</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginTop:</span> <span class="attr">8</span> &#125;&#125;&gt;</span>Upload<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            )&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Upload</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<p>修改：</p>
<div class="highlight-container" data-rel="Tsx"><figure class="iseeu highlight tsx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 获取表单内容</span></span><br><span class="line"><span class="keyword">const</span> params = <span class="title function_">useParams</span>();</span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">HomeGetAPI</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.<span class="property">data</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">data</span>[i].<span class="property">id</span> == params.<span class="property">id</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">          title,</span><br><span class="line">          source,</span><br><span class="line">          config_content,</span><br><span class="line">          config_type,</span><br><span class="line">          is_rotation,</span><br><span class="line">          rotation_pic_url,</span><br><span class="line">          source_file_name,</span><br><span class="line">        &#125; = res.<span class="property">data</span>[i];</span><br><span class="line">        <span class="title function_">setDataList</span>(res.<span class="property">data</span>[i]);</span><br><span class="line">        <span class="title class_">NewsForm</span>.<span class="property">current</span>.<span class="title function_">setFieldsValue</span>(&#123;</span><br><span class="line">          title,</span><br><span class="line">          source,</span><br><span class="line">          config_type,</span><br><span class="line">          rotation_pic_url,</span><br><span class="line">          source_file_name,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="title function_">setRotation</span>(is_rotation);</span><br><span class="line">        <span class="title function_">setContent</span>(config_content);</span><br><span class="line">        <span class="title function_">setImgURL</span>(rotation_pic_url);</span><br><span class="line">        <span class="title function_">setOldFile</span>(source_file_name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, [params.<span class="property">id</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//   确认更新</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleYes</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (content === <span class="string">&quot;&quot;</span> || content.<span class="title function_">trim</span>() === <span class="string">&quot;&lt;p&gt;&lt;/p&gt;&quot;</span>) &#123;</span><br><span class="line">    message.<span class="title function_">error</span>(<span class="string">&quot;内容不能为空&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">formData</span>: <span class="built_in">any</span> = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">    formData.<span class="title function_">append</span>(</span><br><span class="line">      <span class="string">&quot;rotation_pic_url&quot;</span>,</span><br><span class="line">      fileValue.<span class="property">save_url</span> ? fileValue.<span class="property">save_url</span> : imgURL</span><br><span class="line">    );</span><br><span class="line">    formData.<span class="title function_">append</span>(</span><br><span class="line">      <span class="string">&quot;source_file_name&quot;</span>,</span><br><span class="line">      fileValue.<span class="property">source_file_name</span> ? fileValue.<span class="property">source_file_name</span> : oldFile</span><br><span class="line">    );</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;title&quot;</span>, formInfo.<span class="property">title</span>);</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;source&quot;</span>, formInfo.<span class="property">source</span>);</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;config_type&quot;</span>, formInfo.<span class="property">config_type</span>);</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;is_rotation&quot;</span>, rotation); <span class="comment">//是否轮播，1是2否</span></span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;config_content&quot;</span>, content);</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;status&quot;</span>, dataList.<span class="property">status</span>); <span class="comment">//状态，1草稿2发布3取消发布</span></span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;author&quot;</span>, dataList.<span class="property">author</span>); <span class="comment">//默认作者1</span></span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;id&quot;</span>, dataList.<span class="property">id</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">HomePutAPI</span>(formData).<span class="title function_">then</span>(<span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">404</span>) &#123;</span><br><span class="line">          message.<span class="title function_">error</span>(<span class="string">&quot;无相关资源&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          notification.<span class="title function_">info</span>(&#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">`通知`</span>,</span><br><span class="line">            <span class="attr">description</span>: <span class="string">&quot;操作成功&quot;</span>,</span><br><span class="line">            <span class="attr">placement</span>: <span class="string">&quot;bottomRight&quot;</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span> ? resolve : reject, <span class="number">1000</span>);</span><br><span class="line">          location.<span class="property">href</span> = <span class="string">`/homeConfig/drafts`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;rotation_pic_url&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;轮播展示封面&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">valuePropName</span>=<span class="string">&quot;rotation_pic_url&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> &quot;<span class="attr">flex</span>&quot;, <span class="attr">alignItems:</span> &quot;<span class="attr">center</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;rotation === &quot;1&quot; ? (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> &quot;<span class="attr">100</span>%&quot;, <span class="attr">margin:</span> &quot;<span class="attr">0</span> <span class="attr">20px</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Switch</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &quot;<span class="attr">10px</span> <span class="attr">0</span>&quot; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">checked</span>=<span class="string">&#123;dataList.is_rotation&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">onChange</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                    setRotation(2);</span></span><br><span class="line"><span class="language-xml">                  &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">width:</span> &quot;<span class="attr">100</span>%&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">height:</span> &quot;<span class="attr">100px</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">backgroundImage:</span> `<span class="attr">url</span>(<span class="attr">http:</span>//<span class="attr">10.106.13.32:8888</span>/<span class="attr">xinchuang-file</span>/$&#123;<span class="attr">imgURL</span>&#125;)`,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">backgroundSize:</span> &quot;<span class="attr">cover</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            ) : (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            )&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Upload</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">listType</span>=<span class="string">&quot;picture-card&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">fileList</span>=<span class="string">&#123;fileList&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onPreview</span>=<span class="string">&#123;handlePreview&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">beforeUpload</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                return false;</span></span><br><span class="line"><span class="language-xml">              &#125;&#125;</span></span><br><span class="line"><span class="language-xml">            &gt;</span></span><br><span class="line"><span class="language-xml">              &#123;fileList &amp;&amp; fileList.length &gt;= 1 ? null : (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">PlusOutlined</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginTop:</span> <span class="attr">8</span> &#125;&#125;&gt;</span>修改<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              )&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Upload</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>



<h1 id="项目后对-Postman-使用的一些总结"><a href="#项目后对-Postman-使用的一些总结" class="headerlink" title="项目后对 Postman 使用的一些总结"></a>项目后对 Postman 使用的一些总结</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/postman.png"
                     
                ></p>
<p>请求设计区分为以下 6 个面板。</p>
<ul>
<li>Params：URL 中的查询参数，地址中?后端的部分数据</li>
<li>Authorization：如果接口需要授权，可以在该页面设置授权方式（type）和授权信息。</li>
<li>Header：请求头，可以设置请求类型（Content-Type）和 Cookie。</li>
<li>Body：请求数据。</li>
<li>Pre-request Script：请求前脚本，JavaScript 语法，用于在发送请求前生成一些动态数据或做一些处理</li>
<li>Tests：请求后脚本，JavaScript 语法，用于请求返回后做一些处理或断言结果</li>
</ul>
<p>其中 Body 下主要包含以下 4 中格式。</p>
<ul>
<li>form-data：混合表单，支持上传文件</li>
<li>x-www-form-urlencoded：文本表单</li>
<li>raw：原始格式，支持 JSON&#x2F;XML 格式（后面可选择）</li>
<li>binary：二进制格式，用于发送二进制数据流</li>
</ul>
<p>响应区用于展示发送完请求，服务端的响应数据及状态，由 Body 响应体、Headers 响应头、Cookie 响应 Cookies、Test Results 测试结果 4 部分组成。</p>
<p>响应内容中可以以 Pretty（美化格式）、Raw（原始格式）、Preview（HTML 预览格式）等方式查看响应数据。测试结果用于显示请求中 Tests 中设置的断言的测试结果。</p>
<ul>
<li>Pretty：翻译成中文就是漂亮，也就是说返回的 Body 数据在这个标签中查看，都是经过格式化的，格式化后的数据看起来更加直观，所以 Postman 默认展示的也是这个选项。比如：返回 HTML 页面，它会在格式化成 HTML 格式后再展示，比如：返回 JSON，同样也会格式化成 JSON 格式后再展示。</li>
<li>Raw：翻译成中文是未经过加工的，也就是原始数据，原始数据一般都是本文格式、未经过格式化处理的，一般在抓包工具中都有这个选项。</li>
<li>Preview：翻译成中文就是预览，这个选项一般对返回 HTML 的页面效果特别明显，如请求百度后返回结果，点击这个选项后就直接能查看到的页面，如下图。同时，这个选项和浏览器抓包中的 Preview 也是一样的。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP和HTTPS</title>
    <url>/2023/12/18/HTTP%E5%92%8CHTTPS/</url>
    <content><![CDATA[<h2 id="HTTP-HTTPS-简介"><a href="#HTTP-HTTPS-简介" class="headerlink" title="HTTP&#x2F;HTTPS 简介"></a>HTTP&#x2F;HTTPS 简介</h2><p>HTTP 协议是 Hyper Text Transfer Protocol（超文本传输协议）的缩写，是用于从万维网（ WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p>
<p>HTTP 是一个基于 TCP&#x2F;IP 通信协议来传递数据（HTML 文件、图片文件、查询结果等）。</p>
<p>HTTPS 协议是 HyperText Transfer Protocol Secure（超文本传输安全协议）的缩写，是一种通过计算机网络进行安全通信的传输协议。</p>
<p>HTTPS 经由 HTTP 进行通信，但利用 SSL&#x2F;TLS 来加密数据包，HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换资料的隐私与完整性。</p>
<p>HTTP 的 URL 是由 http:&#x2F;&#x2F; 起始与默认使用端口 <strong>80</strong>，而 HTTPS 的 URL 则是由 https:&#x2F;&#x2F; 起始与默认使用端口<strong>443</strong>。</p>
<h2 id="HTTP-的特点和缺点"><a href="#HTTP-的特点和缺点" class="headerlink" title="HTTP 的特点和缺点"></a>HTTP 的特点和缺点</h2><p><strong>特点</strong>：<code>无连接</code>、<code>无状态</code>、<code>灵活</code>、<code>简单快速</code></p>
<ul>
<li><strong>无连接</strong>：每一次请求都要连接一次，请求结束就会断掉，不会保持连接</li>
<li><strong>无状态</strong>：每一次请求都是独立的，请求结束不会记录连接的任何信息(<strong>提起裤子就不认人的意思</strong>)，减少了网络开销，这<code>是优点也是缺点</code></li>
<li><strong>灵活</strong>：通过 http 协议中头部的<code>Content-Type</code>标记，可以传输任意数据类型的数据对象(文本、图片、视频等等)，非常灵活</li>
<li><strong>简单快速</strong>：发送请求访问某个资源时，只需传送请求方法和 URL 就可以了，使用简单，正由于 http 协议简单，使得 http 服务器的程序规模小，因而通信速度很快</li>
</ul>
<p><strong>缺点</strong>：<code>无状态</code>、<code>不安全</code>、<code>明文传输</code>、<code>队头阻塞</code></p>
<ul>
<li><strong>无状态</strong>：请求不会记录任何连接信息，没有记忆，就无法区分多个请求发起者身份是不是同一个客户端的，意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大</li>
<li><strong>不安全</strong>：<code>明文传输</code>可能被窃听不安全，缺少<code>身份认证</code>也可能遭遇伪装，还有缺少<code>报文完整性验证</code>可能遭到篡改</li>
<li><strong>明文传输</strong>：报文(header 部分)使用的是明文，直接将信息暴露给了外界，<code>WIFI陷阱</code>就是复用明文传输的特点，诱导你连上热点，然后疯狂抓取你的流量，从而拿到你的敏感信息</li>
<li><strong>队头阻塞</strong>：开启<code>长连接</code>(下面有讲)时，只建立一个 TCP 连接，同一时刻只能处理一个请求，那么当请求耗时过长时，其他请求就只能阻塞状态(如何解决下面有讲)</li>
</ul>
<h2 id="HTTP-报文组成部分"><a href="#HTTP-报文组成部分" class="headerlink" title="HTTP 报文组成部分"></a>HTTP 报文组成部分</h2><p><strong>http 报文</strong>：由<code>请求报文</code>和<code>响应报文</code>组成</p>
<p><strong>请求报文</strong>：由<code>请求行</code>、<code>请求头</code>、<code>空行</code>、<code>请求体</code>四部分组成</p>
<p><strong>响应报文</strong>：由<code>状态行</code>、<code>响应头</code>、<code>空行</code>、<code>响应体</code>四部分组成</p>
<ul>
<li><strong>请求行</strong>：包含 http 方法，请求地址，http 协议以及版本</li>
<li><strong>请求头&#x2F;响应头</strong>：就是一些 key:value 来告诉服务端我要哪些内容，要注意什么类型等，<a class="link"   href="https://link.juejin.cn/?target=https://kb.cnblogs.com/page/92320/" >请求头&#x2F;响应头每一个字段详解  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><strong>空行</strong>：用来区分首部与实体，因为请求头都是 key:value 的格式，当解析遇到空行时，服务端就知道下一个不再是请求头部分，就该当作请求体来解析了</li>
<li><strong>请求体</strong>：请求的参数</li>
<li><strong>状态行</strong>：包含 http 协议及版本、数字状态码、状态码英文名称</li>
<li><strong>响应体</strong>：服务端返回的数据</li>
</ul>
<h2 id="HTTP-请求方法-9-种"><a href="#HTTP-请求方法-9-种" class="headerlink" title="HTTP 请求方法(9 种)"></a>HTTP 请求方法(9 种)</h2><p><strong>HTTP1.0：</strong> <code>GET</code>、<code>POST</code>、<code>HEAD</code></p>
<p><strong>HTTP1.1：</strong> <code>PUT</code>、<code>PATCH</code>、<code>DELETE</code>、<code>OPTIONS</code>、<code>TRACE</code>、<code>CONNECT</code></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>获取资源</td>
</tr>
<tr>
<td>POST</td>
<td>传输资源，通常会造成服务器资源的修改</td>
</tr>
<tr>
<td>HEAD</td>
<td>获得报文首部</td>
</tr>
<tr>
<td>PUT</td>
<td>更新资源</td>
</tr>
<tr>
<td>PATCH</td>
<td>对 PUT 的补充，对已知资源部分更新 <a class="link"   href="https://link.juejin.cn/?target=https://www.runoob.com/http/http-methods.html" >菜鸟  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
</tr>
<tr>
<td>DELETE</td>
<td>删除资源</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>列出请求资源支持的请求方法，用来跨域请求</td>
</tr>
<tr>
<td>TRACE</td>
<td>追踪请求&#x2F;响应路径，用于测试或诊断</td>
</tr>
<tr>
<td>CONNECT</td>
<td>将连接改为管道方式用于代理服务器</td>
</tr>
</tbody></table>
<h2 id="常见-HTTP-状态码"><a href="#常见-HTTP-状态码" class="headerlink" title="常见 HTTP 状态码"></a>常见 HTTP 状态码</h2><p><strong>1xx: 指示信息——表示请求已接收，继续处理</strong></p>
<p><strong>2xx: 成功——表示请求已被成功接收</strong></p>
<p><strong>3xx: 重定向——表示要完成请求必须进行进一步操作</strong></p>
<p><strong>4xx: 客户端错误——表示请求有语法错误或请求无法实现</strong></p>
<p><strong>5xx: 服务端错误——表示服务器未能实现合法的请求</strong></p>
<h2 id="HTTP-和-HTTPS-的区别"><a href="#HTTP-和-HTTPS-的区别" class="headerlink" title="HTTP 和 HTTPS 的区别"></a>HTTP 和 HTTPS 的区别</h2><ul>
<li>HTTP 是<code>明文传输</code>，不安全的，HTTPS 是<code>加密传输</code>，安全的多</li>
<li>HTTP 标准端口是<code>80</code>，HTTPS 标准端口是<code>443</code></li>
<li>HTTP 不用认证证书<code>免费</code>，HTTPS 需要认证证书<code>要钱</code></li>
<li><code>连接方式不同</code>，HTTP 三次握手，HTTPS 中 TLS1.2 版本 7 次，TLS1.3 版本 6 次</li>
<li>HTTP 在 OSI 网络模型中是在<code>应用层</code>，而 HTTPS 的 TLS 是在<code>传输层</code></li>
<li>HTTP 是<code>无状态</code>的，HTTPS 是<code>有状态</code>的</li>
</ul>
<p><a class="link"   href="https://juejin.cn/post/6994629873985650696?searchId=20231218133002C2D29E6CB8031B5EC787#heading-0" >https://juejin.cn/post/6994629873985650696?searchId=20231218133002C2D29E6CB8031B5EC787#heading-0 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题</title>
    <url>/2023/12/23/%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Day1-数组（一）"><a href="#Day1-数组（一）" class="headerlink" title="Day1 数组（一）"></a>Day1 数组（一）</h1><h2 id="数组中重复的数字"><a href="#数组中重复的数字" class="headerlink" title="数组中重复的数字"></a>数组中重复的数字</h2><p>找出数组中重复的数字。</p>
<p>在一个长度为 n 的数组 nums 里的所有数字都在 0 ～ n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line">输出：<span class="number">2</span> 或 <span class="number">3</span></span><br></pre></td></tr></table></figure></div>

<p>题目给的测试用例里有以下限制：</p>
<ul>
<li><p><code>2 &lt;= n &lt;= 14</code>。</p>
<p>1.利用 js 的<code>indexOf</code>和<code>lastIndexOf</code>方法</p>
</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findRepeatNumber</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="title function_">indexOf</span>(i) != nums.<span class="title function_">lastIndexOf</span>(i)) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = findRepeatNumber;</span><br></pre></td></tr></table></figure></div>

<p>2.使用 Set 创建一个去重后的集合，利用 find 方法遍历原数组，删除集合中的元素（删除失败说明删过 1 次了，即重复）</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findRepeatNumber</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(nums);</span><br><span class="line">  <span class="keyword">return</span> nums.<span class="title function_">find</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> !set.<span class="title function_">delete</span>(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = findRepeatNumber;</span><br></pre></td></tr></table></figure></div>

<p>3.使用 sort 方法先排序，再用 for 循环遍历判断当前元素和下一元素是否相等</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findRepeatNumber</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  nums.<span class="title function_">sort</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] === nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">return</span> nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = findRepeatNumber;</span><br></pre></td></tr></table></figure></div>

<p>4.新增一个“存储空间”，通过遍历数组判断元素是否在“存储空间”里，不在则添加，在则返回</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findRepeatNumber</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag.<span class="title function_">indexOf</span>(item) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">    flag.<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = findRepeatNumber;</span><br></pre></td></tr></table></figure></div>

<h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出和为目标值 target 的那<strong>两个</strong>整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">输入： nums = [<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line">输出： [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">解释： 因为 nums[<span class="number">0</span>] + nums[<span class="number">1</span>] == <span class="number">9</span> ，返回 [<span class="number">0</span>, <span class="number">1</span>] 。</span><br><span class="line">输入： nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>], target = <span class="number">6</span></span><br><span class="line">输出： [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输入： nums = [<span class="number">3</span>,<span class="number">3</span>], target = <span class="number">6</span></span><br><span class="line">输出： [<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure></div>

<p>题目给的测试用例里有以下限制：</p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 4</code>。</li>
<li><code>2 &lt;= nums[i] &lt;= 11</code>。</li>
<li><code>6 &lt;= target &lt;= 10</code>。</li>
<li>只会存在一个有效答案。</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">twoSum</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = nums.<span class="title function_">indexOf</span>(target - nums[i], i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [i, index];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = twoSum;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">twoSum</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[i] + nums[j] === target) &#123;</span><br><span class="line">        <span class="keyword">return</span> [i, j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = twoSum;</span><br></pre></td></tr></table></figure></div>

<h2 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h2><p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p>
<p>题目给的测试用例里有以下限制：</p>
<ul>
<li><code>0 &lt;= s.length &lt;= 14</code>。</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replaceSpace</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">join</span>(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = replaceSpace;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replaceSpace</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">replaceAll</span>(<span class="string">&quot; &quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = replaceSpace;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replaceSpace</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">replace</span>(<span class="regexp">/\s/g</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = replaceSpace;</span><br></pre></td></tr></table></figure></div>

<h2 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h2><p>在一个 <code>n * m</code> 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p>示例：</p>
<p>现有矩阵 matrix 如下：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">19</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">22</span>],</span><br><span class="line">  [<span class="number">10</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">24</span>],</span><br><span class="line">  [<span class="number">18</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">30</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure></div>

<p>给定 <code>target = 5</code>，返回 true。 给定 <code>target = 20</code>，返回 false。</p>
<p>题目给的测试用例里有以下限制：</p>
<ul>
<li><code>0 &lt;= n &lt;= 5</code>。</li>
<li><code>0 &lt;= m &lt;= 5</code>。</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findNumberIn2DArray</span>(<span class="params">matrix, target</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; matrix.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix[i].<span class="title function_">indexOf</span>(target) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = findNumberIn2DArray;</span><br></pre></td></tr></table></figure></div>

<h1 id="Day2-数组（二）"><a href="#Day2-数组（二）" class="headerlink" title="Day2 数组（二）"></a>Day2 数组（二）</h1><h2 id="删除有序数组中的重复项"><a href="#删除有序数组中的重复项" class="headerlink" title="删除有序数组中的重复项"></a>删除有序数组中的重复项</h2><p>给你一个升序排列的数组 <code>nums</code> ，请你<strong>原地</strong>删除重复出现的元素，使每个元素<strong>只出现一次</strong>，返回删除后数组的新长度。元素的<strong>相对顺序</strong>应该保持 一致 。</p>
<p>不要使用额外的空间，你必须在<strong>原地</strong>修改输入数组 并在使用 <code>O(1)</code> 额外空间的条件下完成。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">2</span>, nums = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">解释：函数应该返回新的长度 <span class="number">2</span> ，并且原数组 nums 的前两个元素被修改为 <span class="number">1</span>, <span class="number">2</span> 。</span><br><span class="line">输入：nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">5</span>, nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">解释：函数应该返回新的长度 <span class="number">5</span> ， 并且原数组 nums 的前五个元素被修改为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> 。</span><br></pre></td></tr></table></figure></div>

<p>题目给的测试用例里有以下限制：</p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 22</code>。</li>
<li><code>0 &lt;= nums[i] &lt;= 7</code>。</li>
<li><code>nums</code> 已按升序排列。</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicates</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="comment">// 存储所谓“删除重复项后的新数组”的长度</span></span><br><span class="line">  <span class="keyword">let</span> lenOfNew = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; ) &#123;</span><br><span class="line">    <span class="comment">// 当发现当前元素不等于上一个元素时，说明找到了不重复的那个元素</span></span><br><span class="line">    <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="comment">// 把不重复的那个元素放到“删除重复项后的新数组”的最后</span></span><br><span class="line">      nums[lenOfNew] = nums[i];</span><br><span class="line">      <span class="comment">// “删除重复项后的新数组”的长度加一</span></span><br><span class="line">      lenOfNew++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果当前元素等于上一个元素，说明没找到，需要往后找</span></span><br><span class="line">    <span class="comment">// 如果当前元素不等于上一个元素，说明找到了，也需要往后找</span></span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lenOfNew;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = removeDuplicates;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicates</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = nums.<span class="title function_">indexOf</span>(nums[i], i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">      nums.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">      index = nums.<span class="title function_">indexOf</span>(nums[i], i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = removeDuplicates;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicates</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> len = [...<span class="keyword">new</span> <span class="title class_">Set</span>(nums)].<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = removeDuplicates;</span><br></pre></td></tr></table></figure></div>

<h2 id="移动零"><a href="#移动零" class="headerlink" title="移动零"></a>移动零</h2><p>给定一个数组 <code>nums</code>，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<p>请注意 ，必须在不复制数组的情况下原地对数组进行操作。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">输入: nums = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">12</span>];</span><br><span class="line">输出: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">输入: nums = [<span class="number">0</span>];</span><br><span class="line">输出: [<span class="number">0</span>];</span><br></pre></td></tr></table></figure></div>

<p>题目给的测试用例里有以下限制：</p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 5</code>。</li>
<li><code>0 &lt;= nums[i] &lt;= 12</code>。</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">moveZeroes</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">      1. 使用数组的`sort()`方法对数组`nums`进行排序，排序的规则是通过回调函数进行指定。</span></span><br><span class="line"><span class="comment">      回调函数接受两个参数 `a`和`b`，表示排序比较的两个元素。</span></span><br><span class="line"><span class="comment">      2. 回调函数的比较逻辑为 `!a - !b`。</span></span><br><span class="line"><span class="comment">      这里通过逻辑非运算符 `!` 将非零元素转换为 `false`，将零元素转换为 `true`。</span></span><br><span class="line"><span class="comment">      这样做的目的是让零元素排在非零元素的后面。</span></span><br><span class="line"><span class="comment">      零元素会被排在非零元素的前面，因为当 `!a` 是 `false` 时， `!b` 是 `true`，</span></span><br><span class="line"><span class="comment">       `false` - `true` 的结果是负数。</span></span><br><span class="line"><span class="comment">      这样即使是 `a` 和 `b` 都是零元素，它们的相对顺序也会被保持。</span></span><br><span class="line"><span class="comment">      3. 最后，原数组`nums`会根据排序规则进行排序，</span></span><br><span class="line"><span class="comment">      即零元素会被移动到数组的末尾，非零元素的相对顺序保持不变。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">return</span> nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> !a - !b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = moveZeroes;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 双指针方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moveZeroes</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>; <span class="comment">// 左指针</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> right = <span class="number">0</span>; right &lt; nums.<span class="property">length</span>; right++) &#123;</span><br><span class="line">    <span class="comment">// 如果当前元素不是0，则将其移到左边</span></span><br><span class="line">    <span class="keyword">if</span> (nums[right] !== <span class="number">0</span>) &#123;</span><br><span class="line">      nums[left] = nums[right];</span><br><span class="line">      left++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将剩余的位置填充为0</span></span><br><span class="line">  <span class="keyword">while</span> (left &lt; nums.<span class="property">length</span>) &#123;</span><br><span class="line">    nums[left] = <span class="number">0</span>;</span><br><span class="line">    left++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = moveZeroes;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">moveZeroes</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">while</span> (nums.<span class="title function_">indexOf</span>(<span class="number">0</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">    nums.<span class="title function_">splice</span>(nums.<span class="title function_">indexOf</span>(<span class="number">0</span>), <span class="number">1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> nums.<span class="title function_">concat</span>(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = moveZeroes;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">moveZeroes</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] === <span class="number">0</span>) &#123;</span><br><span class="line">            nums.<span class="title function_">splice</span>(i, <span class="number">1</span>)</span><br><span class="line">            nums.<span class="title function_">push</span>(<span class="number">0</span>)</span><br><span class="line">            i--;</span><br><span class="line">            len--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = moveZeroes;</span><br></pre></td></tr></table></figure></div>

<h2 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h2><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> 。</p>
<p>找出该数组中满足其和 <code>≥ target</code> 的长度最小的 连续子数组 <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">输入：target = <span class="number">7</span>, nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：子数组 [<span class="number">4</span>,<span class="number">3</span>] 是该条件下的长度最小的子数组。</span><br><span class="line">输入：target = <span class="number">4</span>, nums = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">输入：target = <span class="number">11</span>, nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></div>

<p>题目给的测试用例里有以下限制：</p>
<ul>
<li><code>1 &lt;= target &lt;= 11</code>。</li>
<li><code>1 &lt;= nums.length &lt;= 8</code>。</li>
<li><code>1 &lt;= nums[i] &lt;= 4</code>。</li>
</ul>
<p>可以使用滑动窗口（Sliding Window）算法来解决这个问题: 通常需要使用两个指针，一个指向窗口的左边界（left），另一个指向窗口的右边界（right）。这两个指针一起移动，以调整窗口的大小。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">minSubArrayLen</span>(<span class="params">target, nums</span>) &#123;</span><br><span class="line">  <span class="comment">// 滑动窗口算法</span></span><br><span class="line">  <span class="keyword">let</span> minLength = <span class="title class_">Infinity</span>; <span class="comment">//记录满足条件的子数组的最小长度,初始化为无穷大</span></span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>; <span class="comment">// 窗口的左边界</span></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>; <span class="comment">// 当前窗口内元素的和</span></span><br><span class="line">  <span class="comment">// right 窗口的右边界</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> right = <span class="number">0</span>; right &lt; nums.<span class="property">length</span>; right++) &#123;</span><br><span class="line">    sum += nums[right]; <span class="comment">// 将元素的值加到 sum 中，扩大窗口</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (sum &gt;= target) &#123;</span><br><span class="line">      <span class="comment">// 在缩小窗口的过程中，更新 minLength，</span></span><br><span class="line">      <span class="comment">// 将其设为当前窗口的长度（right - left + 1）和之前的 minLength 中较小的那个。</span></span><br><span class="line">      minLength = <span class="title class_">Math</span>.<span class="title function_">min</span>(minLength, right - left + <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// 移动 left 指针，减去窗口左边界的元素值，同时缩小窗口</span></span><br><span class="line">      sum -= nums[left];</span><br><span class="line">      left++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果不存在这样的子数组，则返回0。</span></span><br><span class="line">  <span class="keyword">return</span> minLength !== <span class="title class_">Infinity</span> ? minLength : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = minSubArrayLen;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">minSubArrayLen</span>(<span class="params">target, nums</span>) &#123;</span><br><span class="line">  <span class="comment">// 得到数组的长度</span></span><br><span class="line">  <span class="keyword">let</span> arrLeng = nums.<span class="property">length</span>;</span><br><span class="line">  <span class="comment">// 判断是否为空数组</span></span><br><span class="line">  <span class="keyword">if</span> (arrLeng === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 子数组长度</span></span><br><span class="line">  <span class="comment">// ans 初始化的时候必须给一个大数 ，否则在进行 Math.min() 的时候返回值始终是 0</span></span><br><span class="line">  <span class="keyword">let</span> ans = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>;</span><br><span class="line">  <span class="comment">// 定义指针</span></span><br><span class="line">  <span class="keyword">let</span> start = <span class="number">0</span>,</span><br><span class="line">    end = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 子数组总和</span></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (end &lt; arrLeng) &#123;</span><br><span class="line">    <span class="comment">// 刚开始 start 指针不动，end指针向尾部移动</span></span><br><span class="line">    sum += nums[end];</span><br><span class="line">    <span class="comment">// 子数组总和 &gt;= target , 这是 sum 符合要求的情况</span></span><br><span class="line">    <span class="keyword">while</span> (sum &gt;= target) &#123;</span><br><span class="line">      <span class="comment">// 通过 end 指针与 start 指针得出此次子数组的长度</span></span><br><span class="line">      <span class="keyword">let</span> sonLeng = end - start + <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// 由于要长度最小的子数组，所以将 sonLeng 与 之前的 ans 对比，取最小值</span></span><br><span class="line">      <span class="comment">// 始终确保 ans 是最小的</span></span><br><span class="line">      ans = <span class="title class_">Math</span>.<span class="title function_">min</span>(ans, sonLeng);</span><br><span class="line">      <span class="comment">// 在移动 end 指针时已经得到了一个答案，但不能保证为最优解</span></span><br><span class="line">      <span class="comment">// 所以此时开始将 start 指针向end指针处移动一格，让 end 再次去寻找符合要求的 sum</span></span><br><span class="line">      sum -= nums[start];</span><br><span class="line">      start++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 未找到符合要求的 sum ，故 end 指针继续向后移动</span></span><br><span class="line">    end++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在返回的过程中 还需要与 Number.MAX_SAFE_INTEGER 进行三目运算</span></span><br><span class="line">  <span class="comment">// 因为还存在将 nums 数组都遍历完了，sum 的值都 !== target</span></span><br><span class="line">  <span class="comment">// 说明此时没有长度最小的子数组，返回 0 即可</span></span><br><span class="line">  <span class="keyword">return</span> ans === <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span> ? <span class="number">0</span> : ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = minSubArrayLen;</span><br></pre></td></tr></table></figure></div>

<p>解法可以理解为左右指针中间窗口的 sum 为两指针的“共同财产”，就是右指针一直在努力工作挣钱，好不容易共同财产大过 target，记录一下两指针之间的距离，结果左指针就开始得瑟挥霍，不停花钱（往右移动），结果花钱一直花到 sum 又小过 target，此时右指针不得不再次出来工作，不停向右移动，周而复始，最后取左右指针离得最近的时候。</p>
<h2 id="反转字符串数组"><a href="#反转字符串数组" class="headerlink" title="反转字符串数组"></a>反转字符串数组</h2><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p>
<p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">输入：s = [<span class="string">&quot;h&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;o&quot;</span>]</span><br><span class="line">输出：[<span class="string">&quot;o&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;h&quot;</span>]</span><br><span class="line">输入：s = [<span class="string">&quot;H&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;h&quot;</span>]</span><br><span class="line">输出：[<span class="string">&quot;h&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;H&quot;</span>]</span><br></pre></td></tr></table></figure></div>

<p>题目给的测试用例里有以下限制：</p>
<ul>
<li><code>1 &lt;= s.length &lt;= 6</code>。</li>
<li><code>s[i]</code> 都是 <a class="link"   href="https://zh.wikipedia.org/wiki/ASCII" >ASCII <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 码表中的可打印字符。</li>
</ul>
<p>我们可以使用双指针的方法来解决。具体来说，我们可以使用两个指针，一个从字符串的开头开始，另一个从字符串的末尾开始。然后，我们交换两个指针所指向的字符，然后逐渐向字符串的中间移动，直到两个指针相遇。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseString</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>; <span class="comment">// 左指针</span></span><br><span class="line">  <span class="keyword">let</span> right = s.<span class="property">length</span> - <span class="number">1</span>; <span class="comment">// 右指针</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="comment">// 交换左右指针所指向的字符</span></span><br><span class="line">    <span class="keyword">let</span> temp = s[left];</span><br><span class="line">    s[left] = s[right];</span><br><span class="line">    s[right] = temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动指针</span></span><br><span class="line">    left++;</span><br><span class="line">    right--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = reverseString;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseString</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">reverse</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = reverseString;</span><br></pre></td></tr></table></figure></div>

<p><a class="link"   href="https://www.runoob.com/jsref/jsref-reverse.html" >reverse() 方法用于颠倒数组中元素的顺序。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseString</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="property">length</span> ? [s.<span class="title function_">pop</span>()].<span class="title function_">concat</span>(<span class="title function_">reverseString</span>(s)) : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = reverseString;</span><br></pre></td></tr></table></figure></div>

<p><code>pop() </code>方法用于删除数组的最后一个元素并返回删除的元素。</p>
<p><strong>注意：</strong>此方法改变数组的长度！</p>
<p><strong>提示：</strong> 移除数组第一个元素，请使用 <a class="link"   href="https://www.runoob.com/jsref/jsref-shift.html" >shift() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 方法。</p>
<p><code>concat() </code>方法用于连接两个或多个字符串。</p>
<p>该方法没有改变原有字符串，但是会返回连接两个或多个字符串新字符串。</p>
<h1 id="Day3-数组（三）"><a href="#Day3-数组（三）" class="headerlink" title="Day3 数组（三）"></a>Day3 数组（三）</h1><h2 id="两数之和-II"><a href="#两数之和-II" class="headerlink" title="两数之和 II"></a>两数之和 II</h2><p>给你一个下标从 1 开始的整数数组 <code>numbers</code> ，该数组已按非递减顺序排列，请你从数组中找出满足相加之和等于目标数 <code>target</code> 的两个数。如果设这两个数分别是 <code>numbers[index1]</code> 和 <code>numbers[index2]</code> ，则 <code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code>。</p>
<p>以长度为 2 的整数数组 <code>[index1, index2]</code> 的形式返回这两个整数的下标 <code>index1</code> 和 <code>index2</code>。</p>
<p>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</p>
<p>你所设计的解决方案必须只使用常量级的额外空间。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">输入：numbers = [<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">解释：<span class="number">2</span> 与 <span class="number">7</span> 之和等于目标数 <span class="number">9</span> 。因此 index1 = <span class="number">1</span>, index2 = <span class="number">2</span> 。返回 [<span class="number">1</span>, <span class="number">2</span>]。</span><br><span class="line">输入：numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], target = <span class="number">6</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">解释：<span class="number">2</span> 与 <span class="number">4</span> 之和等于目标数 <span class="number">6</span> 。因此 index1 = <span class="number">1</span>, index2 = <span class="number">3</span> 。返回 [<span class="number">1</span>, <span class="number">3</span>]。</span><br><span class="line">输入：numbers = [-<span class="number">1</span>,<span class="number">0</span>], target = -<span class="number">1</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">解释：-<span class="number">1</span> 与 <span class="number">0</span> 之和等于目标数 -<span class="number">1</span> 。因此 index1 = <span class="number">1</span>, index2 = <span class="number">2</span> 。返回 [<span class="number">1</span>, <span class="number">2</span>]。</span><br></pre></td></tr></table></figure></div>

<p>题目给的测试用例里有以下限制：</p>
<ul>
<li><code>2 &lt;= numbers.length &lt;= 4</code>。</li>
<li><code>-1 &lt;= numbers[i] &lt;= 15</code>。</li>
<li><code>numbers</code> 按非递减顺序排列。</li>
<li><code>-1 &lt;= target &lt;= 17</code>。</li>
<li>仅存在一个有效答案。</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">twoSum2</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> arrMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arrMap.<span class="title function_">has</span>(target - nums[i])) &#123;</span><br><span class="line">            <span class="keyword">return</span> [arrMap.<span class="title function_">get</span>(target - nums[i]) + <span class="number">1</span>, i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        arrMap.<span class="title function_">set</span>(nums[i], i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = twoSum2;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">twoSum2</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; nums.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> index = nums.<span class="title function_">indexOf</span>(target - nums[i])</span><br><span class="line">    <span class="keyword">if</span>(index != -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> [i+<span class="number">1</span>,index+<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = twoSum2</span><br></pre></td></tr></table></figure></div>

<h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要<strong>原地</strong>移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并原地修改输入数组。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>], val = <span class="number">3</span></span><br><span class="line">输出：<span class="number">2</span>, nums = [<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">解释：函数应该返回新的长度 <span class="number">2</span>, 并且 nums 中的前两个元素均为 <span class="number">2</span>。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 <span class="number">2</span> ，而 nums = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>] 或 nums = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>]，也会被视作正确答案。</span><br><span class="line">输入：nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>], val = <span class="number">2</span></span><br><span class="line">输出：<span class="number">5</span>, nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">3</span>]</span><br><span class="line">解释：函数应该返回新的长度 <span class="number">5</span>, 并且 nums 中的前五个元素为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></div>

<p>题目给的测试用例里有以下限制：</p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 8</code>。</li>
<li><code>0 &lt;= nums[i] &lt;= 4</code>。</li>
<li><code>1 &lt;= val &lt;= 3</code>。</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeElement</span>(<span class="params">nums, val</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; nums.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[i] === val)&#123;</span><br><span class="line">        nums.<span class="title function_">splice</span>(i,<span class="number">1</span>)</span><br><span class="line">        i--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = removeElement;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeElement</span>(<span class="params">nums, val</span>) &#123;</span><br><span class="line">  <span class="comment">// 不满足题目要求 </span></span><br><span class="line">  <span class="keyword">if</span>( !<span class="title class_">Array</span>.<span class="title function_">isArray</span>(nums) || !val ) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 倒序遍历，删除了就不会跳级  </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = nums.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[i] === val) &#123;</span><br><span class="line">        nums.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = removeElement;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeElement</span> (nums, val) &#123;</span><br><span class="line">    <span class="keyword">while</span> (nums.<span class="title function_">includes</span>(val)) &#123;</span><br><span class="line">        nums.<span class="title function_">splice</span>(nums.<span class="title function_">indexOf</span>(val),<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> nums.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = removeElement</span><br></pre></td></tr></table></figure></div>

<h2 id="有序数组的平方"><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a>有序数组的平方</h2><p>给你一个按<strong>非递减顺序</strong>排序的整数数组 <code>nums</code>，返回<strong>每个数字的平方</strong>组成的新数组，要求也按<strong>非递减顺序</strong>排序。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">输入：nums = [-<span class="number">4</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">10</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">100</span>]</span><br><span class="line">解释：平方后，数组变为 [<span class="number">16</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">100</span>]</span><br><span class="line">排序后，数组变为 [<span class="number">0</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">100</span>]</span><br><span class="line">输入：nums = [-<span class="number">7</span>,-<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">11</span>]</span><br><span class="line">输出：[<span class="number">4</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">49</span>,<span class="number">121</span>]</span><br></pre></td></tr></table></figure></div>

<p>题目给的测试用例里有以下限制：</p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 5</code>。</li>
<li><code>-7 &lt;= nums[i] &lt;= 11</code>。</li>
<li><code>nums</code> 已按非递减顺序排序。</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sortedSquares</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; nums.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    nums[i] = nums[i] * nums[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a - b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = sortedSquares;</span><br></pre></td></tr></table></figure></div>

<h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><p>给你一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 nums 中是否存在三个元素 a，b，c，使得 <code>a + b + c = 0</code>。请你找出所有和为 0 且不重复的三元组。</p>
<p>注意：答案中不可以包含重复的三元组。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">输入：nums = [-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">4</span>]</span><br><span class="line">输出：[[-<span class="number">1</span>,-<span class="number">1</span>,<span class="number">2</span>],[-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">输入：nums = []</span><br><span class="line">输出：[]</span><br><span class="line">输入：nums = [<span class="number">0</span>]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure></div>

<p>题目给的测试用例里有以下限制：</p>
<ul>
<li><code>0 &lt;= nums.length &lt;= 6</code>。</li>
<li><code>-4 &lt;= nums[i] &lt;= 2</code>。</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">threeSum</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> k = j + <span class="number">1</span>; k &lt; nums.<span class="property">length</span>; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] + nums[k] === <span class="number">0</span>) &#123;</span><br><span class="line">                    set.<span class="title function_">add</span>(<span class="string">`[<span class="subst">$&#123;nums[i]&#125;</span>,<span class="subst">$&#123;nums[j]&#125;</span>,<span class="subst">$&#123;nums[k]&#125;</span>]`</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [...set].<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(item));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = threeSum;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">threeSum</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="comment">// 创建一个数组，用于存储结果</span></span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对数组进行排序</span></span><br><span class="line">  nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历数组中的每个元素</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 跳过重复的元素</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找和为 0 的两个数</span></span><br><span class="line">    <span class="keyword">let</span> left = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">      <span class="keyword">const</span> sum = nums[i] + nums[left] + nums[right];</span><br><span class="line">      <span class="keyword">if</span> (sum === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果找到了和为 0 的三个数，将其添加到结果中</span></span><br><span class="line">        result.<span class="title function_">push</span>([nums[i], nums[left], nums[right]]);</span><br><span class="line">        <span class="comment">// 跳过重复的元素</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] === nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] === nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">        <span class="comment">// 移动指针</span></span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        left++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = threeSum;</span><br></pre></td></tr></table></figure></div>

<h1 id="Day4链表（上）"><a href="#Day4链表（上）" class="headerlink" title="Day4链表（上）"></a>Day4链表（上）</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6中新增的Set、Map两种数据结构理解</title>
    <url>/2023/12/25/ES6%E4%B8%AD%E6%96%B0%E5%A2%9E%E7%9A%84Set%E3%80%81Map%E4%B8%A4%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>如果要用一句话来描述，我们可以说</p>
<p><code>Set</code>是一种叫做集合的数据结构，<code>Map</code>是一种叫做字典的数据结构</p>
<p>什么是集合？什么又是字典？</p>
<ul>
<li>集合<br>是由一堆无序的、相关联的，且不重复的内存结构【数学中称为元素】组成的组合</li>
<li>字典<br>是一些元素的集合。每个元素有一个称作key 的域，不同元素的key 各不相同</li>
</ul>
<p>区别？</p>
<ul>
<li>共同点：集合、字典都可以存储不重复的值</li>
<li>不同点：集合是以[值，值]的形式存储元素，字典是以[键，值]的形式存储</li>
</ul>
<h2 id="一、Set"><a href="#一、Set" class="headerlink" title="一、Set"></a>一、Set</h2><p><code>Set</code>是<code>es6</code>新增的数据结构，类似于数组，但是成员的值都是唯一的，没有重复的值，我们一般称为集合</p>
<p><code>Set</code>本身是一个构造函数，用来生成 Set 数据结构</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const s = new Set();</span><br></pre></td></tr></table></figure></div>

<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><p><code>Set</code>的实例关于增删改查的方法：</p>
<ul>
<li>add()</li>
<li>delete()</li>
<li>has()</li>
<li>clear()</li>
</ul>
<h3 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h3><p>添加某个值，返回 <code>Set</code> 结构本身</p>
<p>当添加实例中已经存在的元素，<code>set</code>不会进行处理添加</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">s.add(1).add(2).add(2); // 2只被添加了一次</span><br></pre></td></tr></table></figure></div>

<h3 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h3><p>删除某个值，返回一个布尔值，表示删除是否成功</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">s.delete(1)</span><br></pre></td></tr></table></figure></div>

<h3 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h3><p>返回一个布尔值，判断该值是否为<code>Set</code>的成员</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">s.has(2)</span><br></pre></td></tr></table></figure></div>

<h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><p>清除所有成员，没有返回值</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">s.clear()</span><br></pre></td></tr></table></figure></div>

<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p><code>Set</code>实例遍历的方法有如下：</p>
<p>关于遍历的方法，有如下：</p>
<ul>
<li>keys()：返回键名的遍历器</li>
<li>values()：返回键值的遍历器</li>
<li>entries()：返回键值对的遍历器</li>
<li>forEach()：使用回调函数遍历每个成员</li>
</ul>
<p><code>Set</code>的遍历顺序就是插入顺序</p>
<p><code>keys</code>方法、<code>values</code>方法、<code>entries</code>方法返回的都是遍历器对象</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let set = new Set([&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]);</span><br><span class="line"></span><br><span class="line">for (let item of set.keys()) &#123;</span><br><span class="line">  console.log(item);</span><br><span class="line">&#125;</span><br><span class="line">// red</span><br><span class="line">// green</span><br><span class="line">// blue</span><br><span class="line"></span><br><span class="line">for (let item of set.values()) &#123;</span><br><span class="line">  console.log(item);</span><br><span class="line">&#125;</span><br><span class="line">// red</span><br><span class="line">// green</span><br><span class="line">// blue</span><br><span class="line"></span><br><span class="line">for (let item of set.entries()) &#123;</span><br><span class="line">  console.log(item);</span><br><span class="line">&#125;</span><br><span class="line">// [&quot;red&quot;, &quot;red&quot;]</span><br><span class="line">// [&quot;green&quot;, &quot;green&quot;]</span><br><span class="line">// [&quot;blue&quot;, &quot;blue&quot;]</span><br><span class="line">forEach()`用于对每个成员执行某种操作，没有返回值，键值、键名都相等，同样的`forEach`方法有第二个参数，用于绑定处理函数的`this</span><br><span class="line">let set = new Set([1, 4, 9]);</span><br><span class="line">set.forEach((value, key) =&gt; console.log(key + &#x27; : &#x27; + value))</span><br><span class="line">// 1 : 1</span><br><span class="line">// 4 : 4</span><br><span class="line">// 9 : 9</span><br></pre></td></tr></table></figure></div>

<p>扩展运算符和<code>Set</code> 结构相结合实现数组或字符串去重</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 数组</span><br><span class="line">let arr = [3, 5, 2, 2, 5, 5];</span><br><span class="line">let unique = [...new Set(arr)]; // [3, 5, 2]</span><br><span class="line"></span><br><span class="line">// 字符串</span><br><span class="line">let str = &quot;352255&quot;;</span><br><span class="line">let unique = [...new Set(str)].join(&quot;&quot;); // &quot;&quot;</span><br></pre></td></tr></table></figure></div>

<p>实现并集、交集、和差集</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a = new Set([1, 2, 3]);</span><br><span class="line">let b = new Set([4, 3, 2]);</span><br><span class="line"></span><br><span class="line">// 并集</span><br><span class="line">let union = new Set([...a, ...b]);</span><br><span class="line">// Set &#123;1, 2, 3, 4&#125;</span><br><span class="line"></span><br><span class="line">// 交集</span><br><span class="line">let intersect = new Set([...a].filter(x =&gt; b.has(x)));</span><br><span class="line">// set &#123;2, 3&#125;</span><br><span class="line"></span><br><span class="line">// （a 相对于 b 的）差集</span><br><span class="line">let difference = new Set([...a].filter(x =&gt; !b.has(x)));</span><br><span class="line">// Set &#123;1&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="二、Map"><a href="#二、Map" class="headerlink" title="二、Map"></a>二、Map</h2><p><code>Map</code>类型是键值对的有序列表，而键和值都可以是任意类型</p>
<p><code>Map</code>本身是一个构造函数，用来生成 <code>Map</code> 数据结构</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const m = new Map()</span><br></pre></td></tr></table></figure></div>

<h3 id="增删改查-1"><a href="#增删改查-1" class="headerlink" title="增删改查"></a>增删改查</h3><p><code>Map</code> 结构的实例针对增删改查有以下属性和操作方法：</p>
<ul>
<li>size 属性</li>
<li>set()</li>
<li>get()</li>
<li>has()</li>
<li>delete()</li>
<li>clear()</li>
</ul>
<h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p><code>size</code>属性返回 Map 结构的成员总数。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const map = new Map();</span><br><span class="line">map.set(&#x27;foo&#x27;, true);</span><br><span class="line">map.set(&#x27;bar&#x27;, false);</span><br><span class="line"></span><br><span class="line">map.size // 2</span><br></pre></td></tr></table></figure></div>

<h3 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h3><p>设置键名<code>key</code>对应的键值为<code>value</code>，然后返回整个 Map 结构</p>
<p>如果<code>key</code>已经有值，则键值会被更新，否则就新生成该键</p>
<p>同时返回的是当前<code>Map</code>对象，可采用链式写法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const m = new Map();</span><br><span class="line"></span><br><span class="line">m.set(&#x27;edition&#x27;, 6)        // 键是字符串</span><br><span class="line">m.set(262, &#x27;standard&#x27;)     // 键是数值</span><br><span class="line">m.set(undefined, &#x27;nah&#x27;)    // 键是 undefined</span><br><span class="line">m.set(1, &#x27;a&#x27;).set(2, &#x27;b&#x27;).set(3, &#x27;c&#x27;) // 链式操作</span><br></pre></td></tr></table></figure></div>

<h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">get`方法读取`key`对应的键值，如果找不到`key`，返回`undefined</span><br><span class="line">const m = new Map();</span><br><span class="line"></span><br><span class="line">const hello = function() &#123;console.log(&#x27;hello&#x27;);&#125;;</span><br><span class="line">m.set(hello, &#x27;Hello ES6!&#x27;) // 键是函数</span><br><span class="line"></span><br><span class="line">m.get(hello)  // Hello ES6!</span><br></pre></td></tr></table></figure></div>

<h3 id="has-1"><a href="#has-1" class="headerlink" title="has()"></a>has()</h3><p><code>has</code>方法返回一个布尔值，表示某个键是否在当前 Map 对象之中</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const m = new Map();</span><br><span class="line"></span><br><span class="line">m.set(&#x27;edition&#x27;, 6);</span><br><span class="line">m.set(262, &#x27;standard&#x27;);</span><br><span class="line">m.set(undefined, &#x27;nah&#x27;);</span><br><span class="line"></span><br><span class="line">m.has(&#x27;edition&#x27;)     // true</span><br><span class="line">m.has(&#x27;years&#x27;)       // false</span><br><span class="line">m.has(262)           // true</span><br><span class="line">m.has(undefined)     // true</span><br></pre></td></tr></table></figure></div>

<h3 id="delete-1"><a href="#delete-1" class="headerlink" title="delete()"></a>delete()</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete`方法删除某个键，返回`true`。如果删除失败，返回`false</span><br><span class="line">const m = new Map();</span><br><span class="line">m.set(undefined, &#x27;nah&#x27;);</span><br><span class="line">m.has(undefined)     // true</span><br><span class="line"></span><br><span class="line">m.delete(undefined)</span><br><span class="line">m.has(undefined)       // false</span><br></pre></td></tr></table></figure></div>

<h3 id="clear-1"><a href="#clear-1" class="headerlink" title="clear()"></a>clear()</h3><p><code>clear</code>方法清除所有成员，没有返回值</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let map = new Map();</span><br><span class="line">map.set(&#x27;foo&#x27;, true);</span><br><span class="line">map.set(&#x27;bar&#x27;, false);</span><br><span class="line"></span><br><span class="line">map.size // 2</span><br><span class="line">map.clear()</span><br><span class="line">map.size // 0</span><br></pre></td></tr></table></figure></div>

<h3 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h3><p><code>Map</code>结构原生提供三个遍历器生成函数和一个遍历方法：</p>
<ul>
<li>keys()：返回键名的遍历器</li>
<li>values()：返回键值的遍历器</li>
<li>entries()：返回所有成员的遍历器</li>
<li>forEach()：遍历 Map 的所有成员</li>
</ul>
<p>遍历顺序就是插入顺序</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const map = new Map([</span><br><span class="line">  [&#x27;F&#x27;, &#x27;no&#x27;],</span><br><span class="line">  [&#x27;T&#x27;,  &#x27;yes&#x27;],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">for (let key of map.keys()) &#123;</span><br><span class="line">  console.log(key);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;F&quot;</span><br><span class="line">// &quot;T&quot;</span><br><span class="line"></span><br><span class="line">for (let value of map.values()) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;no&quot;</span><br><span class="line">// &quot;yes&quot;</span><br><span class="line"></span><br><span class="line">for (let item of map.entries()) &#123;</span><br><span class="line">  console.log(item[0], item[1]);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;F&quot; &quot;no&quot;</span><br><span class="line">// &quot;T&quot; &quot;yes&quot;</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">for (let [key, value] of map.entries()) &#123;</span><br><span class="line">  console.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;F&quot; &quot;no&quot;</span><br><span class="line">// &quot;T&quot; &quot;yes&quot;</span><br><span class="line"></span><br><span class="line">// 等同于使用map.entries()</span><br><span class="line">for (let [key, value] of map) &#123;</span><br><span class="line">  console.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;F&quot; &quot;no&quot;</span><br><span class="line">// &quot;T&quot; &quot;yes&quot;</span><br><span class="line"></span><br><span class="line">map.forEach(function(value, key, map) &#123;</span><br><span class="line">  console.log(&quot;Key: %s, Value: %s&quot;, key, value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<h2 id="三、WeakSet-和-WeakMap"><a href="#三、WeakSet-和-WeakMap" class="headerlink" title="三、WeakSet 和 WeakMap"></a>三、WeakSet 和 WeakMap</h2><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><p>创建<code>WeakSet</code>实例</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const ws = new WeakSet();</span><br></pre></td></tr></table></figure></div>

<p><code>WeakSet</code>可以接受一个具有 <code>Iterable</code>接口的对象作为参数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const a = [[1, 2], [3, 4]];</span><br><span class="line">const ws = new WeakSet(a);</span><br><span class="line">// WeakSet &#123;[1, 2], [3, 4]&#125;</span><br></pre></td></tr></table></figure></div>

<p>在<code>API</code>中<code>WeakSet</code>与<code>Set</code>有两个区别：</p>
<ul>
<li>没有遍历操作的<code>API</code></li>
<li>没有<code>size</code>属性</li>
</ul>
<p><code>WeackSet</code>只能成员只能是引用类型，而不能是其他类型的值</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let ws=new WeakSet();</span><br><span class="line"></span><br><span class="line">// 成员不是引用类型</span><br><span class="line">let weakSet=new WeakSet([2,3]);</span><br><span class="line">console.log(weakSet) // 报错</span><br><span class="line"></span><br><span class="line">// 成员为引用类型</span><br><span class="line">let obj1=&#123;name:1&#125;</span><br><span class="line">let obj2=&#123;name:1&#125;</span><br><span class="line">let ws=new WeakSet([obj1,obj2]); </span><br><span class="line">console.log(ws) //WeakSet &#123;&#123;…&#125;, &#123;…&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>WeakSet</code>里面的引用只要在外部消失，它在 <code>WeakSet</code>里面的引用就会自动消失</p>
<h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><p><code>WeakMap</code>结构与<code>Map</code>结构类似，也是用于生成键值对的集合</p>
<p>在<code>API</code>中<code>WeakMap</code>与<code>Map</code>有两个区别：</p>
<ul>
<li>没有遍历操作的<code>API</code></li>
<li>没有<code>clear</code>清空方法</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// WeakMap 可以使用 set 方法添加成员</span><br><span class="line">const wm1 = new WeakMap();</span><br><span class="line">const key = &#123;foo: 1&#125;;</span><br><span class="line">wm1.set(key, 2);</span><br><span class="line">wm1.get(key) // 2</span><br><span class="line"></span><br><span class="line">// WeakMap 也可以接受一个数组，</span><br><span class="line">// 作为构造函数的参数</span><br><span class="line">const k1 = [1, 2, 3];</span><br><span class="line">const k2 = [4, 5, 6];</span><br><span class="line">const wm2 = new WeakMap([[k1, &#x27;foo&#x27;], [k2, &#x27;bar&#x27;]]);</span><br><span class="line">wm2.get(k2) // &quot;bar&quot;</span><br></pre></td></tr></table></figure></div>

<p><code>WeakMap</code>只接受对象作为键名（<code>null</code>除外），不接受其他类型的值作为键名</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const map = new WeakMap();</span><br><span class="line">map.set(1, 2)</span><br><span class="line">// TypeError: 1 is not an object!</span><br><span class="line">map.set(Symbol(), 2)</span><br><span class="line">// TypeError: Invalid value used as weak map key</span><br><span class="line">map.set(null, 2)</span><br><span class="line">// TypeError: Invalid value used as weak map key</span><br></pre></td></tr></table></figure></div>

<p><code>WeakMap</code>的键名所指向的对象，一旦不再需要，里面的键名对象和所对应的键值对会自动消失，不用手动删除引用</p>
<p>举个场景例子：</p>
<p>在网页的 DOM 元素上添加数据，就可以使用<code>WeakMap</code>结构，当该 DOM 元素被清除，其所对应的<code>WeakMap</code>记录就会自动被移除</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const wm = new WeakMap();</span><br><span class="line"></span><br><span class="line">const element = document.getElementById(&#x27;example&#x27;);</span><br><span class="line"></span><br><span class="line">wm.set(element, &#x27;some information&#x27;);</span><br><span class="line">wm.get(element) // &quot;some information&quot;</span><br></pre></td></tr></table></figure></div>

<p>注意：<code>WeakMap</code> 弱引用的只是键名，而不是键值。键值依然是正常引用</p>
<p>下面代码中，键值<code>obj</code>会在<code>WeakMap</code>产生新的引用，当你修改<code>obj</code>不会影响到内部</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const wm = new WeakMap();</span><br><span class="line">let key = &#123;&#125;;</span><br><span class="line">let obj = &#123;foo: 1&#125;;</span><br><span class="line"></span><br><span class="line">wm.set(key, obj);</span><br><span class="line">obj = null;</span><br><span class="line">wm.get(key)</span><br><span class="line">// Object &#123;foo: 1&#125;</span><br></pre></td></tr></table></figure></div>

<p>原文地址：<a class="link"   href="https://mp.weixin.qq.com/s/rNagDuBmJSms-R0EXiaLmQ" >https://mp.weixin.qq.com/s/rNagDuBmJSms-R0EXiaLmQ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>流媒体</title>
    <url>/2024/02/27/%E6%B5%81%E5%AA%92%E4%BD%93/</url>
    <content><![CDATA[<h3 id="什么是流媒体？"><a href="#什么是流媒体？" class="headerlink" title="什么是流媒体？"></a><strong>什么是流媒体？</strong></h3><p><a class="link"   href="https://www.zhihu.com/search?q=%E6%B5%81%E5%AA%92%E4%BD%93&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:698362244%7D" >流媒体 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>就是指<strong>可在线&#x2F;实时观看音视频的互联网产品</strong>。</p>
<p>主要是这三类：</p>
<ul>
<li>视频类产品：爱奇艺、优酷、腾讯视频等。</li>
<li>音频类产品：QQ 音乐、喜马拉雅等。</li>
<li>直播类产品：斗鱼、虎牙等。</li>
</ul>
<p>我们平时在文章上看到的“流媒体”通常就是指“视频类产品”。</p>
<h3 id="什么是流协议？"><a href="#什么是流协议？" class="headerlink" title="什么是流协议？"></a><strong>什么是流协议？</strong></h3><p>简单地说，流协议就是在两个通信系统之间传输多媒体文件的一套规则，它定义了视频文件将如何分解为小数据包以及它们在互联网上传输的顺序，RTMP 与 RTSP 是比较常见的流媒体协议。</p>
<h3 id="RTMP"><a href="#RTMP" class="headerlink" title="RTMP"></a><strong>RTMP</strong></h3><ul>
<li>英文全称：<code>Real-Time Messaging Protocol</code></li>
<li>中文意思：<strong>实时消息传递协议</strong></li>
</ul>
<p>还记得几年前，当您尝试播放视频时，您的计算机会告诉您更新您的 Flash 插件吗？这背后的技术其实就是 RTMP。</p>
<p>RTMP 由 Macromedia（后来被 Adobe 收购）开发，用于流式传输到 Flash 播放器，随着 Flash 开始被淘汰并且基于 HTTP 的协议成为流式传输到播放设备的新标准，RTMP 在流媒体协议中的地位越来越低。但是丝毫不影响 RTMP 的使用，因为在端到端<a class="link"   href="https://cloud.tencent.com/product/css?from_column=20065&from=20065" >直播 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>和点播中，它仍然是王者！</p>
<h4 id="RTMP-的优点"><a href="#RTMP-的优点" class="headerlink" title="RTMP 的优点"></a>RTMP 的优点</h4><h6 id="1、低延迟"><a href="#1、低延迟" class="headerlink" title="1、低延迟"></a>1、低延迟</h6><p>RTMP 使用独占的 1935 端口，无需缓冲，可以实现低延迟。</p>
<h6 id="2、适应性强"><a href="#2、适应性强" class="headerlink" title="2、适应性强"></a>2、适应性强</h6><p>所有 RTMP <a class="link"   href="https://cloud.tencent.com/act/pro/promotion-cvm?from_column=20065&from=20065" >服务器 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>都可以录制直播媒体流，同时还允许观众跳过部分广播并在直播开始后加入直播流。</p>
<h6 id="3、灵活性"><a href="#3、灵活性" class="headerlink" title="3、灵活性"></a>3、灵活性</h6><p>RTMP 支持整合文本、视频和音频，支持 MP3 和 AAC 音频流，也支持 MP4、FLV 和 F4V 视频。</p>
<h4 id="RTMP-的缺点"><a href="#RTMP-的缺点" class="headerlink" title="RTMP 的缺点"></a>RTMP 的缺点</h4><h6 id="1、HTML5-不支持"><a href="#1、HTML5-不支持" class="headerlink" title="1、HTML5 不支持"></a>1、HTML5 不支持</h6><p>标准 HTML5 播放器不支持 RTMP 流。</p>
<h6 id="2、容易受到带宽问题的影响"><a href="#2、容易受到带宽问题的影响" class="headerlink" title="2、容易受到带宽问题的影响"></a>2、容易受到带宽问题的影响</h6><p>RTMP 流经常会出现低带宽问题，造成视频中断。</p>
<h6 id="3、HTTP-不兼容"><a href="#3、HTTP-不兼容" class="headerlink" title="3、HTTP 不兼容"></a>3、HTTP 不兼容</h6><p>无法通过 HTTP 流式传输 RTMP，必须需要实现一个特殊的服务器，并使用第三方内容交付网络或使用流媒体视频平台。</p>
<h3 id="RTSP"><a href="#RTSP" class="headerlink" title="RTSP"></a><strong>RTSP</strong></h3><ul>
<li>英文全称：<code>Real-Time Streaming Protocol</code></li>
<li>中文意思：<strong>实时流协议</strong></li>
</ul>
<p>RTSP 旨在建立和维护原始数据源（客户端）和流服务器之间的连接，允许控制流媒体服务器内的娱乐和通信系统，允许暂停和播放功能，RTSP 是 RealNetworks 于 1996 年 与 Netscape 和哥伦比亚大学联合开发的协议。</p>
<p>这种可靠性和控制性的结合使 RTSP 成为闭路电视 (CCTV) 和类似 监控系统的热门选择。因此，它是许多 IP 摄像机的首选协议。</p>
<h4 id="RTSP-的优点"><a href="#RTSP-的优点" class="headerlink" title="RTSP 的优点"></a>RTSP 的优点</h4><h6 id="1、轻松自定义流"><a href="#1、轻松自定义流" class="headerlink" title="1、轻松自定义流"></a>1、轻松自定义流</h6><p>可以通过结合不同的协议来开发自己的视频流解决方案。</p>
<h6 id="2、分段流式传输"><a href="#2、分段流式传输" class="headerlink" title="2、分段流式传输"></a>2、分段流式传输</h6><p>RTSP 流使观看者能够在下载完成之前访问的视频内容，而不必下载完整的视频以流式传输内容。</p>
<h4 id="RTSP-的缺点"><a href="#RTSP-的缺点" class="headerlink" title="RTSP 的缺点"></a>RTSP 的缺点</h4><h6 id="1、与-HTTP-不兼容"><a href="#1、与-HTTP-不兼容" class="headerlink" title="1、与 HTTP 不兼容"></a>1、与 HTTP 不兼容</h6><p>没有简单的解决方案可以在 Web 浏览器中播放 RTSP 流，因为 RTSP 旨在通过<a class="link"   href="https://cloud.tencent.com/product/vpc?from_column=20065&from=20065" >私有网络 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>流式传输视频，必须借用额外软件。</p>
<h6 id="2、使用率低"><a href="#2、使用率低" class="headerlink" title="2、使用率低"></a>2、使用率低</h6><p>由于视频播放器和流媒体服务并未广泛支持 RTSP 流媒体，因为使用率比较低。</p>
<h3 id="流媒体协议-HLS"><a href="#流媒体协议-HLS" class="headerlink" title="流媒体协议 HLS"></a><strong>流媒体协议 HLS</strong></h3><p><strong>HLS 全称是 HTTP Live Streaming</strong>，是一个由 Apple 公司提出的基于 HTTP 的媒体流传输协议，用于实时音视频流的传输。目前 HLS 协议被广泛的应用于视频点播和直播领域。</p>
<h4 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h4><p>HLS 跟 DASH 协议的原理非常类似。通过将整条流切割成一个小的可以通过 HTTP 下载的媒体文件，然后提供一个配套的媒体列表文件，提供给客户端，让客户端顺序地拉取这些媒体文件播放，来实现看上去是在播放一条流的效果。由于传输层协议只需要标准的 HTTP 协议，HLS 可以方便的透过防火墙或者代理服务器，而且可以很方便的利用 CDN 进行分发加速，并且客户端实现起来也很方便。</p>
<p>从概念上讲，HTTP Live Streaming 由三个部分组成：服务器组件，分发组件和客户端软件。</p>
<p>HLS 把整个流分成一个个小的基于 HTTP 的文件来下载，每次只下载一些。HLS 协议由三部分组成：HTTP、M3U8、TS。这三部分中，HTTP 是传输协议，M3U8 是索引文件，TS 是音视频的媒体信息。</p>
<h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><p>1.基于 HTTP 传输，防止防火墙屏蔽；</p>
<p>2.码率自适应；</p>
<p>3.服务器易于拓展，易于 http 做负载均衡；</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h4><p>1.时延较长（10 秒左右），对时延敏感慎用；</p>
<p>2.对服务器内存要求高；</p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><a class="link"   href="https://blog.csdn.net/Martin_chen2/article/details/105663665" >HLS 详解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://juejin.cn/post/7018487386568917023" >Hls.js 使用文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.zhihu.com/question/38538084" >想用 HLS 实现视频播放，需要掌握哪些知识? <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
</search>
